# Template fetchedusing:
# curl -LfO 'https://airflow.apache.org/docs/apache-airflow/3.1.0/docker-compose.yaml'
# as recommended by airflow 3.0.6 documentation: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html

# region airflow
---
x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider distributions you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  # [personnal comment]: pre-building immage alow to save space and to avoid to have as many images as services.
  image: dsdc-airflow:latest
  # build needs to be done separately (to avoid error saying that build already exist)
  # build:
  #   context: ..
  #   dockerfile: services/airflow/Dockerfile
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow_strong_password@dsdc-postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow_strong_password@dsdc-postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__EXECUTION_API_SERVER_URL: 'http://airflow-apiserver:8080/execution/'
    # yamllint disable rule:line-length
    # Use simple http server on scheduler for health checks
    # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
    # yamllint enable rule:line-length
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    # WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
    # for other purpose (development, test and especially production usage) build/extend Airflow image.
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    # The following line can be used to set a custom config file, stored in the local config folder
    AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
    DSDC_DIR: '/opt/dsdc'
    DSDC_POSTGRES_DSDC_USER: ${DSDC_POSTGRES_DSDC_USER}
    DSDC_POSTGRES_DSDC_PASSWORD: ${DSDC_POSTGRES_DSDC_PASSWORD}
    DSDC_POSTGRES_DSDC_DB: ${DSDC_POSTGRES_DSDC_DB}
    PYTHONPATH: '/opt/airflow/plugins:/opt/airflow/plugins/dsdc:/opt/dsdc'

  volumes:
    - ${DSDC_DIR}/services/airflow/dags:/opt/airflow/dags
    - ${DSDC_DIR}/logs:/opt/airflow/logs
    - ${DSDC_DIR}/services/airflow/config:/opt/airflow/config
    - ${DSDC_DIR:-.}/dsdc:/opt/dsdc/dsdc
    - ${DSDC_DIR:-.}/data:/opt/dsdc/data
    - ${DSDC_DIR:-.}/models:/opt/dsdc/models
    - ${DSDC_DIR:-.}/.dsdc_project_root:/opt/dsdc/.dsdc_project_root
    - ${DSDC_DIR:-.}/config.yaml:/opt/dsdc/config.yaml
    - ${DSDC_DIR:-.}/../ds-project/mai25_bds_extraction/data/raw/IIT-CDIP:/opt/dsdc/mock_data/IIT-CDIP
    - ${DSDC_DIR:-.}/tests:/opt/dsdc/tests

    # - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
# region airflow
  redis:
    # Redis is limited to 7.2-bookworm due to licencing change
    # https://redis.io/blog/redis-adopts-dual-source-available-licensing/
    container_name: dsdc-redis
    image: redis:7.2-bookworm
    expose:
      - 6379
    ports:
      - "${DSDC_REDIS_PORT_MAPPING}"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  airflow-apiserver:
    <<: *airflow-common
    command: api-server
    ports:
      - "${DSDC_AIRFLOW_APISERVER_PORT_MAPPING}"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/v2/version"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-dag-processor:
    <<: *airflow-common
    command: dag-processor
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type DagProcessorJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      # yamllint disable rule:line-length
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-apiserver:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
          export AIRFLOW_UID=$$(id -u)
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        echo
        echo "Creating missing opt dirs if missing:"
        echo
        mkdir -v -p /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Airflow version:"
        /entrypoint airflow version
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Running airflow config list to create default config file if missing."
        echo
        /entrypoint airflow config list >/dev/null
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Change ownership of files in /opt/airflow to ${AIRFLOW_UID}:0"
        echo
        chown -R "${AIRFLOW_UID}:0" /opt/airflow/
        echo
        echo "Change ownership of files in shared volumes to ${AIRFLOW_UID}:0"
        echo
        chown -v -R "${AIRFLOW_UID}:0" /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}

    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: ${DSDC__AIRFLOW_WWW_USER_CREATE}
      _AIRFLOW_WWW_USER_USERNAME: ${DSDC__AIRFLOW_WWW_USER_USERNAME}
      _AIRFLOW_WWW_USER_PASSWORD: ${DSDC__AIRFLOW_WWW_USER_PASSWORD}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow
    depends_on:
      <<: *airflow-common-depends-on

  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
  # or by explicitly targeted on the command line e.g. docker-compose up flower.
  # See: https://docs.docker.com/compose/profiles/
  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - "${DSDC_FLOWER_PORT_MAPPING}"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
# region postgres
  postgres:
    image: postgres:15
    container_name: dsdc-postgres
    environment:
      POSTGRES_USER: ${DSDC_POSTGRES_USER}
      POSTGRES_PASSWORD: ${DSDC_POSTGRES_PASSWORD}
      POSTGRES_DB: ${DSDC_POSTGRES_DB}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DSDC_POSTGRES_USER}", "-d", "${DSDC_POSTGRES_DB}" ]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    volumes:
      - dsdc_postgres:/var/lib/postgresql/data
    ports:
      - "${DSDC_POSTGRES_PORT_MAPPING}"
# region pgadmin
  pgadmin:
    container_name: dsdc-pgadmin
    image: dpage/pgadmin4
    restart: always
    ports:
      - "${DSDC_PGADMIN_PORT_MAPPING}"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${DSDC_PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${DSDC_PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - dsdc_pgadmin:/var/lib/pgadmin
    depends_on:
      - postgres
# region dsdc
  extract-text:
    container_name: dsdc-extract-text
    image: dsdc-extract-text:latest
    build:
      context: ..
      dockerfile: services/extract-text/Dockerfile
    ports:
      - "${DSDC_EXTRACT_TEXT_PORT_MAPPING}"

  process-text:
    container_name: dsdc-process-text
    image: dsdc-process-text:latest
    build:
      context: ..
      dockerfile: services/process-text/Dockerfile
    ports:
      - "${DSDC_PROCESS_TEXT_PORT_MAPPING}"

  process-image:
    container_name: dsdc-process-image
    image: dsdc-process-image:latest
    build:
      context: ..
      dockerfile: services/process-image/Dockerfile
    ports:
      - "${DSDC_PROCESS_IMAGE_PORT_MAPPING}"

  compute-clip-embeddings:
    container_name: dsdc-compute-clip-embeddings
    image: dsdc-compute-clip-embeddings:latest
    build:
      context: ..
      dockerfile: services/compute-clip-embeddings/Dockerfile
    ports:
      - "${DSDC_COMPUTE_CLIP_EMBEDDINGS_PORT_MAPPING}"
    restart: always

  train:
    container_name: dsdc-train
    image: dsdc-train:latest
    build:
      context: ..
      dockerfile: services/train/Dockerfile
    environment:
      DSDC_POSTGRES_DSDC_USER: ${DSDC_POSTGRES_DSDC_USER}
      DSDC_POSTGRES_DSDC_PASSWORD: ${DSDC_POSTGRES_DSDC_PASSWORD}
      DSDC_POSTGRES_DSDC_DB: ${DSDC_POSTGRES_DSDC_DB}

    ports:
      - "${DSDC_TRAIN_PORT_MAPPING}"
    volumes:
      - ${DSDC_DIR:-.}/models:/app/models

  predict:
    container_name: dsdc-predict
    image: dsdc-predict:latest
    build:
      context: ..
      dockerfile: services/predict/Dockerfile
    environment:
      DSDC_JWT_SECRET_KEY: ${DSDC_JWT_SECRET_KEY}
    ports:
      - "${DSDC_PREDICT_PORT_MAPPING}"
    volumes:
    - ${DSDC_DIR:-.}/models:/app/models
    - ${DSDC_DIR:-.}/services/predict/main.py:/app/main.py
# region auth
  auth:
    container_name: dsdc-auth
    image: dsdc-auth:latest
    build:
      context: ..
      dockerfile: services/auth/Dockerfile
    ports:
      - "${DSDC_AUTH_PORT_MAPPING}"
    environment:
      DSDC_JWT_SECRET_KEY: ${DSDC_JWT_SECRET_KEY}
# region mlflow
  mlflow:
    container_name: dsdc-mlflow
    build:
      context: ..
      dockerfile: services/mlflow/Dockerfile
    ports:
      - "${DSDC_MLFLOW_PORT_MAPPING}"
    environment:
      MLFLOW_BACKEND_STORE_URI: postgresql://mlflow:mlflow_strong_password@dsdc-postgres:5432/mlflow
      MLFLOW_ARTIFACT_ROOT: file:///mlflow/artifacts
    volumes:
      - ${DSDC_DIR:-.}/models/mlruns:/mlflow
    depends_on:
      - postgres

#region streamlit
  streamlit:
    container_name: dsdc-streamlit
    image: dsdc-streamlit:latest
    build:
      context: ..
      dockerfile: ${DSDC_DIR:-.}/services/streamlit/Dockerfile
    ports:
      - "${DSDC_STREAMLIT_PORT_MAPPING}"

# region prometheus
  prometheus:
    image: prom/prometheus
    container_name: dsdc-prometheus
    volumes:
      - ${DSDC_DIR:-.}/services/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "${DSDC_PROMETHEUS_PORT_MAPPING}"
    depends_on:
      - cadvisor
    restart: always

# region data providers
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: dsdc-cadvisor
    ports:
      - "${DSDC_CADVISOR_PORT_MAPPING}"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
#        - /var/lib/docker/:/var/lib/docker:ro
    restart: always

  dsdc-tables-exporter:
    container_name: dsdc-tables-exporter
    image: prometheuscommunity/postgres-exporter
    environment:
      - DATA_SOURCE_NAME=postgresql://${DSDC_POSTGRES_EXPORTER_USER}:${DSDC_POSTGRES_EXPORTER_PASSWORD}@dsdc-postgres:5432/${DSDC_POSTGRES_DSDC_DB}?sslmode=disable
      # - PG_EXPORTER_DISABLE_DEFAULT_METRICS=true
    volumes:
      - ${DSDC_DIR:-.}/services/monitoring/postgres-exporters/dsdc/queries.yaml:/etc/postgres_exporter/queries.yaml
    ports:
      - "${DSDC_DSDC_POSTGRES_EXPORTER_PORT_MAPPING}"
    command:
      - '--extend.query-path=/etc/postgres_exporter/queries.yaml'
      - '--no-collector.wal'
      # - '--disable-default-metrics'

  mlflow-postgres_exporter:
    container_name: dsdc-mlflow-exporter
    image: prometheuscommunity/postgres-exporter
    environment:
      - DATA_SOURCE_NAME=postgresql://${DSDC_POSTGRES_EXPORTER_USER}:${DSDC_POSTGRES_EXPORTER_PASSWORD}@dsdc-postgres:5432/${DSDC_POSTGRES_MLFLOW_DB}?sslmode=disable
      # - PG_EXPORTER_DISABLE_DEFAULT_METRICS=true
    volumes:
      - ${DSDC_DIR:-.}/services/monitoring/postgres-exporters/mlflow/queries.yaml:/etc/postgres_exporter/queries.yaml
    ports:
      - "${DSDC_MLFLOW_POSTGRES_EXPORTER_PORT_MAPPING}"
    command:
      - '--extend.query-path=/etc/postgres_exporter/queries.yaml'
      - '--no-collector.wal'
      # - '--disable-default-metrics'

  airflow-postgres_exporter:
    container_name: dsdc-airflow-exporter
    image: prometheuscommunity/postgres-exporter
    environment:
      - DATA_SOURCE_NAME=postgresql://${DSDC_POSTGRES_EXPORTER_USER}:${DSDC_POSTGRES_EXPORTER_PASSWORD}@dsdc-postgres:5432/${DSDC_POSTGRES_AIRFLOW_DB}?sslmode=disable
      # - PG_EXPORTER_DISABLE_DEFAULT_METRICS=true
    volumes:
      - ${DSDC_DIR:-.}/services/monitoring/postgres-exporters/airflow/queries.yaml:/etc/postgres_exporter/queries.yaml
    ports:
      - "${DSDC_AIRFLOW_POSTGRES_EXPORTER_PORT_MAPPING}"
    command:
      - '--extend.query-path=/etc/postgres_exporter/queries.yaml'
      - '--no-collector.wal'
      # - '--disable-default-metrics'

#region grafana
  grafana:
    image: grafana/grafana:latest
    container_name: dsdc-grafana
    ports:
      - "${DSDC_GRAFANA_PORT_MAPPING}"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - dsdc_grafana:/var/lib/grafana
      - ${DSDC_DIR:-.}/services/monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus

volumes:
  dsdc_postgres:
    external: 'true'
  dsdc_pgadmin:
    external: 'true'
  dsdc_grafana:
    external: 'true'
