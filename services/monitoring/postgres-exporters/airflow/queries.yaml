dags:
  query: |
    WITH last_10_runs AS (
      SELECT
        dag_id,
        EXTRACT(EPOCH FROM (end_date - start_date)) AS duration,
        ROW_NUMBER() OVER (PARTITION BY dag_id ORDER BY start_date DESC) AS rn
      FROM dag_run
      WHERE state = 'success' AND start_date IS NOT NULL AND end_date IS NOT NULL
    ),
    avg_last_10 AS (
      SELECT
        dag_id,
        AVG(duration) AS avg_duration_last_10
      FROM last_10_runs
      WHERE rn <= 10
      GROUP BY dag_id
    )
    SELECT
      all_dags.dag_id,
      COALESCE(success_stats.success, 0) AS success,
      COALESCE(failed_stats.failed, 0) AS failed,
      COALESCE(running_stats.running, 0) AS running,
      COALESCE(total_stats.total_runs, 0) AS total_runs,
      COALESCE(duration_stats.total_duration, 0) AS total_duration,
      COALESCE(avg_last_10.avg_duration_last_10, 0) AS avg_duration_last_10
    FROM (
      SELECT DISTINCT dag_id
      FROM dag_run
    ) AS all_dags
    LEFT JOIN (
      SELECT dag_id, COUNT(*) AS success
      FROM dag_run
      WHERE state = 'success'
      GROUP BY dag_id
    ) AS success_stats
      ON all_dags.dag_id = success_stats.dag_id
    LEFT JOIN (
      SELECT dag_id, COUNT(*) AS failed
      FROM dag_run
      WHERE state = 'failed'
      GROUP BY dag_id
    ) AS failed_stats
      ON all_dags.dag_id = failed_stats.dag_id
    LEFT JOIN (
      SELECT dag_id, COUNT(*) AS running
      FROM dag_run
      WHERE state = 'running'
      GROUP BY dag_id
    ) AS running_stats
      ON all_dags.dag_id = running_stats.dag_id
    LEFT JOIN (
      SELECT dag_id, COUNT(*) AS total_runs
      FROM dag_run
      GROUP BY dag_id
    ) AS total_stats
      ON all_dags.dag_id = total_stats.dag_id
    LEFT JOIN (
      SELECT dag_id, SUM(EXTRACT(EPOCH FROM (end_date - start_date))) AS total_duration
      FROM dag_run
      WHERE start_date IS NOT NULL AND end_date IS NOT NULL
      GROUP BY dag_id
    ) AS duration_stats
      ON all_dags.dag_id = duration_stats.dag_id
    LEFT JOIN avg_last_10
      ON all_dags.dag_id = avg_last_10.dag_id;
  metrics:
    - dag_id:
        usage: LABEL
    - success:
        usage: GAUGE
        description: "Total number of successful DAG runs per dag_id."
        metric_name: dags_success
    - failed:
        usage: GAUGE
        description: "Total number of failed DAG runs per dag_id."
        metric_name: dags_failed
    - running:
        usage: GAUGE
        description: "Number of DAG runs currently in running state per dag_id."
        metric_name: dags_running
    - total_runs:
        usage: GAUGE
        description: "Total number of DAG runs per dag_id."
        metric_name: dags_total_runs
    - total_duration:
        usage: GAUGE
        description: "Total duration in seconds of all completed DAG runs per dag_id."
        metric_name: dags_total_duration
    - avg_duration_last_10:
        usage: GAUGE
        description: "Average duration in seconds of the last 10 successful DAG runs per dag_id."
        metric_name: dags_avg_duration_last_10
tasks:
  query: |
    WITH last_10_task_runs AS (
      SELECT
        task_id,
        EXTRACT(EPOCH FROM (end_date - start_date)) AS duration,
        ROW_NUMBER() OVER (PARTITION BY task_id ORDER BY start_date DESC) AS rn
      FROM task_instance
      WHERE state = 'success' AND start_date IS NOT NULL AND end_date IS NOT NULL
    ),
    avg_last_10 AS (
      SELECT
        task_id,
        AVG(duration) AS avg_duration_last_10
      FROM last_10_task_runs
      WHERE rn <= 10
      GROUP BY task_id
    )
    SELECT
      all_tasks.task_id,
      COALESCE(success_stats.success, 0) AS success,
      COALESCE(failed_stats.failed, 0) AS failed,
      COALESCE(running_stats.running, 0) AS running,
      COALESCE(total_stats.total_runs, 0) AS executions,
      COALESCE(avg_last_10.avg_duration_last_10, 0) AS avg_duration_last_10
    FROM (
      SELECT DISTINCT task_id
      FROM task_instance
    ) AS all_tasks
    LEFT JOIN (
      SELECT task_id, COUNT(*) AS success
      FROM task_instance
      WHERE state = 'success'
      GROUP BY task_id
    ) AS success_stats
      ON all_tasks.task_id = success_stats.task_id
    LEFT JOIN (
      SELECT task_id, COUNT(*) AS failed
      FROM task_instance
      WHERE state = 'failed'
      GROUP BY task_id
    ) AS failed_stats
      ON all_tasks.task_id = failed_stats.task_id
    LEFT JOIN (
      SELECT task_id, COUNT(*) AS running
      FROM task_instance
      WHERE state = 'running'
      GROUP BY task_id
    ) AS running_stats
      ON all_tasks.task_id = running_stats.task_id
    LEFT JOIN (
      SELECT task_id, COUNT(*) AS total_runs
      FROM task_instance
      GROUP BY task_id
    ) AS total_stats
      ON all_tasks.task_id = total_stats.task_id
    LEFT JOIN avg_last_10
      ON all_tasks.task_id = avg_last_10.task_id;
  metrics:
    - task_id:
        usage: LABEL
    - success:
        usage: GAUGE
        description: "Total number of successful task instances per task_id."
        metric_name: tasks_success
    - failed:
        usage: GAUGE
        description: "Total number of failed task instances per task_id."
        metric_name: tasks_failed
    - running:
        usage: GAUGE
        description: "Number of task instances currently in running state per task_id."
        metric_name: tasks_running
    - executions:
        usage: GAUGE
        description: "Total number of task instance executions (all states) per task_id."
        metric_name: tasks_executions_count
    - avg_duration_last_10:
        usage: GAUGE
        description: "Average duration (in seconds) of the last 10 successful task instances per task_id."
        metric_name: tasks_avg_duration_last_10
