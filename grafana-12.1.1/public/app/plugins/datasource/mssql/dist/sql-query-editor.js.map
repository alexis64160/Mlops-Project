{"version":3,"file":"sql-query-editor.js","mappings":"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","sources":["webpack://mssql/../../../../../packages/grafana-e2e-selectors/src/resolver.ts","webpack://mssql/../../../../../packages/grafana-e2e-selectors/src/selectors/constants.ts","webpack://mssql/../../../../../packages/grafana-e2e-selectors/src/selectors/components.ts","webpack://mssql/../../../../../packages/grafana-e2e-selectors/src/selectors/index.ts","webpack://mssql/../../../../../packages/grafana-e2e-selectors/src/selectors/pages.ts","webpack://mssql/../../../../../packages/grafana-sql/src/components/ConfirmModal.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/DatasetSelector.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/TableSelector.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/QueryHeader.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/query-editor-raw/QueryEditorRaw.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/query-editor-raw/QueryValidator.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/query-editor-raw/QueryToolbox.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/query-editor-raw/RawEditor.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/visual-query-builder/Preview.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/utils/getColumnsWithIndices.ts","webpack://mssql/../../../../../packages/grafana-sql/src/utils/useSqlChange.ts","webpack://mssql/../../../../../packages/grafana-sql/src/components/visual-query-builder/GroupByRow.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/visual-query-builder/SQLGroupByRow.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/visual-query-builder/OrderByRow.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/visual-query-builder/SQLOrderByRow.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/visual-query-builder/AwesomeQueryBuilder.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/visual-query-builder/WhereRow.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/visual-query-builder/SQLWhereRow.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/visual-query-builder/SelectColumn.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/visual-query-builder/SelectCustomFunctionParameters.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/visual-query-builder/SelectFunctionParameters.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/visual-query-builder/SelectRow.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/visual-query-builder/VisualEditor.tsx","webpack://mssql/../../../../../packages/grafana-sql/src/components/QueryEditor.tsx"],"sourcesContent":["import { gte, compare, valid } from 'semver';\n\nimport {\n  FunctionSelector,\n  Selectors,\n  SelectorsOf,\n  StringSelector,\n  VersionedSelectorGroup,\n  VersionedSelectors,\n  CssSelector,\n  UrlSelector,\n  FunctionSelectorTwoArgs,\n} from './types';\n\n/**\n * Resolves selectors based on the Grafana version\n */\nexport function resolveSelectors<T extends VersionedSelectorGroup>(\n  versionedSelectors: T,\n  grafanaVersion = 'latest'\n): SelectorsOf<T> {\n  const version = grafanaVersion.replace(/\\-.*/, '');\n\n  return resolveSelectorGroup(versionedSelectors, version);\n}\n\nfunction resolveSelectorGroup<T extends VersionedSelectorGroup>(group: T, grafanaVersion: string): SelectorsOf<T> {\n  const result: Selectors = {};\n\n  for (const [key, value] of Object.entries(group)) {\n    if (isVersionedSelectorGroup(value)) {\n      result[key] = resolveSelectorGroup(value, grafanaVersion);\n    } else {\n      assertIsSemverValid(value, key);\n      result[key] = resolveSelector(value, grafanaVersion);\n    }\n  }\n\n  return result as SelectorsOf<T>;\n}\n\nfunction isVersionedSelectorGroup(\n  target: VersionedSelectors | VersionedSelectorGroup\n): target is VersionedSelectorGroup {\n  if (typeof target === 'object') {\n    const [first] = Object.keys(target);\n    return !valid(first);\n  }\n\n  return false;\n}\n\nfunction resolveSelector(\n  versionedSelector: VersionedSelectors,\n  grafanaVersion: string\n): StringSelector | FunctionSelector | FunctionSelectorTwoArgs | CssSelector | UrlSelector {\n  let versionToUse;\n  let versions = Object.keys(versionedSelector).sort(compare);\n\n  if (grafanaVersion === 'latest') {\n    return versionedSelector[versions[versions.length - 1]];\n  }\n\n  for (const version of versions) {\n    if (gte(grafanaVersion, version)) {\n      versionToUse = version;\n    }\n  }\n\n  if (!versionToUse) {\n    versionToUse = versions[versions.length - 1];\n  }\n\n  return versionedSelector[versionToUse];\n}\n\nfunction assertIsSemverValid(versionedSelector: VersionedSelectors, selectorName: string) {\n  if (!Object.keys(versionedSelector).every((version) => valid(version))) {\n    throw new Error(`Invalid semver version: '${selectorName}'`);\n  }\n}\n","export const MIN_GRAFANA_VERSION = '8.5.0';\n","// NOTE: by default Component string selectors are set up to be aria-labels,\n// however there are many cases where your component may not need an aria-label\n// (a <button> with clear text, for example, does not need an aria-label as it's already labeled)\n// but you still might need to select it for testing,\n// in that case please add the attribute data-testid={selector} in the component and\n// prefix your selector string with 'data-testid' so that when create the selectors we know to search for it on the right attribute\n\nimport { VersionedSelectorGroup } from '../types';\n\nimport { MIN_GRAFANA_VERSION } from './constants';\n\n/**\n * Selectors grouped/defined in Components\n */\nexport const versionedComponents = {\n  RadioButton: {\n    container: {\n      '10.2.3': 'data-testid radio-button',\n    },\n  },\n  Breadcrumbs: {\n    breadcrumb: {\n      '9.4.0': (title: string) => `data-testid ${title} breadcrumb`,\n    },\n  },\n  CanvasGridAddActions: {\n    addPanel: {\n      '12.1.0': 'data-testid CanvasGridAddActions add-panel',\n    },\n    groupPanels: {\n      '12.1.0': 'data-testid CanvasGridAddActions group-panels',\n    },\n    ungroup: {\n      '12.1.0': 'data-testid CanvasGridAddActions ungroup',\n    },\n    addRow: {\n      '12.1.0': 'data-testid CanvasGridAddActions add-row',\n    },\n    pasteRow: {\n      '12.1.0': 'data-testid CanvasGridAddActions paste-row',\n    },\n    addTab: {\n      '12.1.0': 'data-testid CanvasGridAddActions add-tab',\n    },\n    pasteTab: {\n      '12.1.0': 'data-testid CanvasGridAddActions paste-tab',\n    },\n  },\n  DashboardEditPaneSplitter: {\n    primaryBody: {\n      '12.1.0': 'data-testid DashboardEditPaneSplitter primary body',\n    },\n  },\n  EditPaneHeader: {\n    deleteButton: {\n      '12.1.0': 'data-testid EditPaneHeader delete panel',\n    },\n    copyDropdown: {\n      '12.1.0': 'data-testid EditPaneHeader copy dropdown',\n    },\n    copy: {\n      '12.1.0': 'data-testid EditPaneHeader copy',\n    },\n    duplicate: {\n      '12.1.0': 'data-testid EditPaneHeader duplicate',\n    },\n    backButton: {\n      '12.1.0': 'data-testid EditPaneHeader back',\n    },\n  },\n  TimePicker: {\n    openButton: {\n      [MIN_GRAFANA_VERSION]: 'data-testid TimePicker Open Button',\n    },\n    overlayContent: {\n      '10.2.3': 'data-testid TimePicker Overlay Content',\n    },\n    fromField: {\n      '10.2.3': 'data-testid Time Range from field',\n      [MIN_GRAFANA_VERSION]: 'Time Range from field',\n    },\n    toField: {\n      '10.2.3': 'data-testid Time Range to field',\n      [MIN_GRAFANA_VERSION]: 'Time Range to field',\n    },\n    applyTimeRange: {\n      [MIN_GRAFANA_VERSION]: 'data-testid TimePicker submit button',\n    },\n    copyTimeRange: {\n      '10.4.0': 'data-testid TimePicker copy button',\n    },\n    pasteTimeRange: {\n      '10.4.0': 'data-testid TimePicker paste button',\n    },\n    calendar: {\n      label: {\n        '10.2.3': 'data-testid Time Range calendar',\n        [MIN_GRAFANA_VERSION]: 'Time Range calendar',\n      },\n      openButton: {\n        '10.2.3': 'data-testid Open time range calendar',\n        [MIN_GRAFANA_VERSION]: 'Open time range calendar',\n      },\n      closeButton: {\n        '10.2.3': 'data-testid Close time range Calendar',\n        [MIN_GRAFANA_VERSION]: 'Close time range Calendar',\n      },\n    },\n    absoluteTimeRangeTitle: {\n      [MIN_GRAFANA_VERSION]: 'data-testid-absolute-time-range-narrow',\n    },\n  },\n  DataSourcePermissions: {\n    form: { '9.5.0': () => 'form[name=\"addPermission\"]' },\n    roleType: {\n      '9.5.0': 'Role to add new permission to',\n    },\n    rolePicker: {\n      '9.5.0': 'Built-in role picker',\n    },\n    permissionLevel: {\n      '12.0.0': 'Permission level',\n      '9.5.0': 'Permission Level',\n    },\n  },\n  DateTimePicker: {\n    input: {\n      '10.2.3': 'data-testid date-time-input',\n    },\n  },\n  DataSource: {\n    TestData: {\n      QueryTab: {\n        scenarioSelectContainer: {\n          [MIN_GRAFANA_VERSION]: 'Test Data Query scenario select container',\n        },\n        scenarioSelect: {\n          [MIN_GRAFANA_VERSION]: 'Test Data Query scenario select',\n        },\n        max: {\n          [MIN_GRAFANA_VERSION]: 'TestData max',\n        },\n        min: {\n          [MIN_GRAFANA_VERSION]: 'TestData min',\n        },\n        noise: {\n          [MIN_GRAFANA_VERSION]: 'TestData noise',\n        },\n        seriesCount: {\n          [MIN_GRAFANA_VERSION]: 'TestData series count',\n        },\n        spread: {\n          [MIN_GRAFANA_VERSION]: 'TestData spread',\n        },\n        startValue: {\n          [MIN_GRAFANA_VERSION]: 'TestData start value',\n        },\n        drop: {\n          [MIN_GRAFANA_VERSION]: 'TestData drop values',\n        },\n      },\n    },\n    DataSourceHttpSettings: {\n      urlInput: {\n        '10.4.0': 'data-testid Datasource HTTP settings url',\n        [MIN_GRAFANA_VERSION]: 'Datasource HTTP settings url',\n      },\n    },\n    Jaeger: {\n      traceIDInput: {\n        [MIN_GRAFANA_VERSION]: 'Trace ID',\n      },\n    },\n    Prometheus: {\n      configPage: {\n        connectionSettings: {\n          [MIN_GRAFANA_VERSION]: 'Data source connection URL', // aria-label in grafana experimental\n        },\n        manageAlerts: {\n          '10.4.0': 'prometheus-alerts-manager', // id for switch component\n        },\n        allowAsRecordingRulesTarget: {\n          '12.1.0': 'prometheus-recording-rules-target',\n        },\n        scrapeInterval: {\n          '10.4.0': 'data-testid scrape interval',\n        },\n        queryTimeout: {\n          '10.4.0': 'data-testid query timeout',\n        },\n        defaultEditor: {\n          '10.4.0': 'data-testid default editor',\n        },\n        disableMetricLookup: {\n          '10.4.0': 'disable-metric-lookup', // id for switch component\n        },\n        prometheusType: {\n          '10.4.0': 'data-testid prometheus type',\n        },\n        prometheusVersion: {\n          '10.4.0': 'data-testid prometheus version',\n        },\n        cacheLevel: {\n          '10.4.0': 'data-testid cache level',\n        },\n        incrementalQuerying: {\n          '10.4.0': 'prometheus-incremental-querying', // id for switch component\n        },\n        queryOverlapWindow: {\n          '10.4.0': 'data-testid query overlap window',\n        },\n        disableRecordingRules: {\n          '10.4.0': 'disable-recording-rules', // id for switch component\n        },\n        customQueryParameters: {\n          '10.4.0': 'data-testid custom query parameters',\n        },\n        httpMethod: {\n          '10.4.0': 'data-testid http method',\n        },\n        exemplarsAddButton: {\n          '10.3.0': 'data-testid Add exemplar config button',\n          [MIN_GRAFANA_VERSION]: 'Add exemplar config button',\n        },\n        internalLinkSwitch: {\n          '10.3.0': 'data-testid Internal link switch',\n          [MIN_GRAFANA_VERSION]: 'Internal link switch',\n        },\n        codeModeMetricNamesSuggestionLimit: {\n          '11.1.0': 'data-testid code mode metric names suggestion limit',\n        },\n        seriesLimit: {\n          '12.0.2': 'data-testid maximum series limit',\n        },\n      },\n      queryEditor: {\n        explain: {\n          '10.4.0': 'data-testid prometheus explain switch wrapper',\n        },\n        editorToggle: {\n          '10.4.0': 'data-testid QueryEditorModeToggle', // wrapper for toggle\n        },\n        options: {\n          '10.4.0': 'data-testid prometheus options', // wrapper for options group\n        },\n        legend: {\n          '10.4.0': 'data-testid prometheus legend wrapper', // wrapper for multiple compomnents\n        },\n        format: {\n          '10.4.0': 'data-testid prometheus format',\n        },\n        step: {\n          '10.4.0': 'data-testid prometheus-step', // id for autosize component\n        },\n        type: {\n          '10.4.0': 'data-testid prometheus type', //wrapper for radio button group\n        },\n        exemplars: {\n          '10.4.0': 'data-testid prometheus-exemplars', // id for editor switch component\n        },\n        builder: {\n          // see QueryBuilder below for commented selectors\n          metricSelect: {\n            '10.4.0': 'data-testid metric select',\n          },\n          hints: {\n            '10.4.0': 'data-testid prometheus hints', // wrapper for hints component\n          },\n          metricsExplorer: {\n            '10.4.0': 'data-testid metrics explorer',\n          },\n          queryAdvisor: {\n            '10.4.0': 'data-testid query advisor',\n          },\n        },\n        code: {\n          queryField: {\n            '10.4.0': 'data-testid prometheus query field',\n          },\n          metricsCountInfo: {\n            '11.1.0': 'data-testid metrics count disclaimer',\n          },\n          metricsBrowser: {\n            openButton: {\n              '10.4.0': 'data-testid open metrics browser',\n            },\n            selectMetric: {\n              '10.4.0': 'data-testid select a metric',\n            },\n            seriesLimit: {\n              '10.3.1': 'data-testid series limit',\n            },\n            metricList: {\n              '10.4.0': 'data-testid metric list',\n            },\n            labelNamesFilter: {\n              '10.4.0': 'data-testid label names filter',\n            },\n            labelValuesFilter: {\n              '10.4.0': 'data-testid label values filter',\n            },\n            useQuery: {\n              '10.4.0': 'data-testid use query',\n            },\n            useAsRateQuery: {\n              '10.4.0': 'data-testid use as rate query',\n            },\n            validateSelector: {\n              '10.4.0': 'data-testid validate selector',\n            },\n            clear: {\n              '10.4.0': 'data-testid clear',\n            },\n          },\n        },\n      },\n      exemplarMarker: {\n        '10.3.0': 'data-testid Exemplar marker',\n        [MIN_GRAFANA_VERSION]: 'Exemplar marker',\n      },\n      variableQueryEditor: {\n        queryType: {\n          '10.4.0': 'data-testid query type',\n        },\n        labelnames: {\n          metricRegex: {\n            '10.4.0': 'data-testid label names metric regex',\n          },\n        },\n        labelValues: {\n          labelSelect: {\n            '10.4.0': 'data-testid label values label select',\n          },\n        },\n        metricNames: {\n          metricRegex: {\n            '10.4.0': 'data-testid metric names metric regex',\n          },\n        },\n        varQueryResult: {\n          '10.4.0': 'data-testid variable query result',\n        },\n        seriesQuery: {\n          '10.4.0': 'data-testid prometheus series query',\n        },\n        classicQuery: {\n          '10.4.0': 'data-testid prometheus classic query',\n        },\n      },\n      annotations: {\n        minStep: {\n          '10.4.0': 'data-testid prometheus-annotation-min-step', // id for autosize input\n        },\n        title: {\n          '10.4.0': 'data-testid prometheus annotation title',\n        },\n        tags: {\n          '10.4.0': 'data-testid prometheus annotation tags',\n        },\n        text: {\n          '10.4.0': 'data-testid prometheus annotation text',\n        },\n        seriesValueAsTimestamp: {\n          '10.4.0': 'data-testid prometheus annotation series value as timestamp',\n        },\n      },\n    },\n  },\n  Menu: {\n    MenuComponent: {\n      [MIN_GRAFANA_VERSION]: (title: string) => `${title} menu`,\n    },\n    MenuGroup: {\n      [MIN_GRAFANA_VERSION]: (title: string) => `${title} menu group`,\n    },\n    MenuItem: {\n      [MIN_GRAFANA_VERSION]: (title: string) => `${title} menu item`,\n    },\n    SubMenu: {\n      container: {\n        '10.3.0': 'data-testid SubMenu container',\n        [MIN_GRAFANA_VERSION]: 'SubMenu container',\n      },\n      icon: {\n        '10.3.0': 'data-testid SubMenu icon',\n        [MIN_GRAFANA_VERSION]: 'SubMenu icon',\n      },\n    },\n  },\n  Panels: {\n    Panel: {\n      title: {\n        [MIN_GRAFANA_VERSION]: (title: string) => `data-testid Panel header ${title}`,\n      },\n      content: {\n        '11.1.0': 'data-testid panel content',\n      },\n      headerContainer: {\n        '9.5.0': 'data-testid header-container',\n      },\n      headerItems: {\n        '10.2.0': (item: string) => `data-testid Panel header item ${item}`,\n      },\n      menuItems: {\n        '9.5.0': (item: string) => `data-testid Panel menu item ${item}`,\n      },\n      menu: {\n        '9.5.0': (title: string) => `data-testid Panel menu ${title}`,\n      },\n      containerByTitle: {\n        [MIN_GRAFANA_VERSION]: (title: string) => `${title} panel`,\n      },\n      headerCornerInfo: {\n        [MIN_GRAFANA_VERSION]: (mode: string) => `Panel header ${mode}`,\n      },\n      status: {\n        '10.2.0': (status: string) => `data-testid Panel status ${status}`,\n        [MIN_GRAFANA_VERSION]: (_: string) => 'Panel status',\n      },\n      loadingBar: {\n        '10.0.0': () => `Panel loading bar`,\n      },\n      HoverWidget: {\n        container: {\n          '10.1.0': 'data-testid hover-header-container',\n          [MIN_GRAFANA_VERSION]: 'hover-header-container',\n        },\n        dragIcon: {\n          '10.0.0': 'data-testid drag-icon',\n        },\n      },\n      PanelDataErrorMessage: {\n        '10.4.0': 'data-testid Panel data error message',\n      },\n    },\n    Visualization: {\n      Graph: {\n        container: {\n          '9.5.0': 'Graph container',\n        },\n        VisualizationTab: {\n          legendSection: {\n            [MIN_GRAFANA_VERSION]: 'Legend section',\n          },\n        },\n        Legend: {\n          legendItemAlias: {\n            [MIN_GRAFANA_VERSION]: (name: string) => `gpl alias ${name}`,\n          },\n          showLegendSwitch: {\n            [MIN_GRAFANA_VERSION]: 'gpl show legend',\n          },\n        },\n        xAxis: {\n          labels: {\n            [MIN_GRAFANA_VERSION]: () => 'div.flot-x-axis > div.flot-tick-label',\n          },\n        },\n      },\n      BarGauge: {\n        valueV2: {\n          [MIN_GRAFANA_VERSION]: 'data-testid Bar gauge value',\n        },\n      },\n      PieChart: {\n        svgSlice: {\n          '10.3.0': 'data testid Pie Chart Slice',\n        },\n      },\n      Text: {\n        container: { [MIN_GRAFANA_VERSION]: () => '.markdown-html' },\n      },\n      Table: {\n        header: {\n          [MIN_GRAFANA_VERSION]: 'table header',\n        },\n        footer: {\n          [MIN_GRAFANA_VERSION]: 'table-footer',\n        },\n        body: {\n          '10.2.0': 'data-testid table body',\n        },\n      },\n    },\n  },\n  VizLegend: {\n    seriesName: {\n      '10.3.0': (name: string) => `data-testid VizLegend series ${name}`,\n    },\n  },\n  Drawer: {\n    General: {\n      title: {\n        [MIN_GRAFANA_VERSION]: (title: string) => `Drawer title ${title}`,\n      },\n      expand: {\n        [MIN_GRAFANA_VERSION]: 'Drawer expand',\n      },\n      contract: {\n        [MIN_GRAFANA_VERSION]: 'Drawer contract',\n      },\n      close: {\n        '10.3.0': 'data-testid Drawer close',\n        [MIN_GRAFANA_VERSION]: 'Drawer close',\n      },\n      rcContentWrapper: { '9.4.0': () => '.rc-drawer-content-wrapper' },\n      subtitle: {\n        '10.4.0': 'data-testid drawer subtitle',\n      },\n    },\n    DashboardSaveDrawer: {\n      saveButton: {\n        '11.1.0': 'data-testid Save dashboard drawer button',\n      },\n      saveAsButton: {\n        '11.1.0': 'data-testid Save as dashboard drawer button',\n      },\n      saveAsTitleInput: {\n        '11.1.0': 'Save dashboard title field',\n      },\n    },\n  },\n  PanelEditor: {\n    General: {\n      content: {\n        '11.1.0': 'data-testid Panel editor content',\n        '8.0.0': 'Panel editor content',\n      },\n    },\n    OptionsPane: {\n      content: {\n        '11.1.0': 'data-testid Panel editor option pane content',\n        [MIN_GRAFANA_VERSION]: 'Panel editor option pane content',\n      },\n      select: {\n        [MIN_GRAFANA_VERSION]: 'Panel editor option pane select',\n      },\n      fieldLabel: {\n        [MIN_GRAFANA_VERSION]: (type: string) => `${type} field property editor`,\n      },\n      fieldInput: {\n        '11.0.0': (title: string) => `data-testid Panel editor option pane field input ${title}`,\n      },\n    },\n    DataPane: {\n      content: {\n        '11.1.0': 'data-testid Panel editor data pane content',\n        [MIN_GRAFANA_VERSION]: 'Panel editor data pane content',\n      },\n    },\n    applyButton: {\n      '9.2.0': 'data-testid Apply changes and go back to dashboard',\n      '9.1.0': 'Apply changes and go back to dashboard',\n      '8.0.0': 'panel editor apply',\n    },\n    toggleVizPicker: {\n      '10.0.0': 'data-testid toggle-viz-picker',\n      '8.0.0': 'toggle-viz-picker',\n    },\n    toggleVizOptions: {\n      '10.1.0': 'data-testid toggle-viz-options',\n      [MIN_GRAFANA_VERSION]: 'toggle-viz-options',\n    },\n    toggleTableView: {\n      '11.1.0': 'data-testid toggle-table-view',\n      [MIN_GRAFANA_VERSION]: 'toggle-table-view',\n    },\n\n    // [Geomap] Map controls\n    showZoomField: {\n      '10.2.0': 'Map controls Show zoom control field property editor',\n    },\n    showAttributionField: {\n      '10.2.0': 'Map controls Show attribution field property editor',\n    },\n    showScaleField: {\n      '10.2.0': 'Map controls Show scale field property editor',\n    },\n    showMeasureField: {\n      '10.2.0': 'Map controls Show measure tools field property editor',\n    },\n    showDebugField: {\n      '10.2.0': 'Map controls Show debug field property editor',\n    },\n\n    measureButton: {\n      '12.1.0': 'data-testid panel-editor-measure-button',\n      '9.2.0': 'show measure tools',\n    },\n\n    Outline: {\n      section: {\n        '12.0.0': 'data-testid Outline section',\n      },\n      node: {\n        '12.0.0': (type: string) => `data-testid outline node ${type}`,\n      },\n      item: {\n        '12.0.0': (type: string) => `data-testid outline item ${type}`,\n      },\n    },\n    ElementEditPane: {\n      variableType: {\n        '12.0.0': (type?: string) => `data-testid variable type ${type}`,\n      },\n      addVariableButton: {\n        '12.0.0': 'data-testid add variable button',\n      },\n      variableNameInput: {\n        '12.0.0': 'data-testid variable name input',\n      },\n      variableLabelInput: {\n        '12.0.0': 'data-testid variable label input',\n      },\n      AutoGridLayout: {\n        minColumnWidth: {\n          '12.1.0': 'data-testid min column width selector',\n        },\n        customMinColumnWidth: {\n          '12.1.0': 'data-testid custom min column width input',\n        },\n        clearCustomMinColumnWidth: {\n          '12.1.0': 'data-testid clear custom min column width input',\n        },\n        maxColumns: {\n          '12.1.0': 'data-testid max columns selector',\n        },\n        rowHeight: {\n          '12.1.0': 'data-testid row height selector',\n        },\n        customRowHeight: {\n          '12.1.0': 'data-testid custom row height input',\n        },\n        clearCustomRowHeight: {\n          '12.1.0': 'data-testid clear custom row height input',\n        },\n        fillScreen: {\n          '12.1.0': 'data-testid fill screen switch',\n        },\n      },\n    },\n  },\n  PanelInspector: {\n    Data: {\n      content: {\n        [MIN_GRAFANA_VERSION]: 'Panel inspector Data content',\n      },\n    },\n    Stats: {\n      content: {\n        [MIN_GRAFANA_VERSION]: 'Panel inspector Stats content',\n      },\n    },\n    Json: {\n      content: {\n        '11.1.0': 'data-testid Panel inspector Json content',\n        [MIN_GRAFANA_VERSION]: 'Panel inspector Json content',\n      },\n    },\n    Query: {\n      content: {\n        [MIN_GRAFANA_VERSION]: 'Panel inspector Query content',\n      },\n      refreshButton: {\n        [MIN_GRAFANA_VERSION]: 'Panel inspector Query refresh button',\n      },\n      jsonObjectKeys: {\n        [MIN_GRAFANA_VERSION]: () => '.json-formatter-key',\n      },\n    },\n  },\n  Tab: {\n    title: {\n      '11.2.0': (title: string) => `data-testid Tab ${title}`,\n    },\n    active: { [MIN_GRAFANA_VERSION]: () => '[class*=\"-activeTabStyle\"]' },\n  },\n  RefreshPicker: {\n    runButtonV2: {\n      [MIN_GRAFANA_VERSION]: 'data-testid RefreshPicker run button',\n    },\n    intervalButtonV2: {\n      [MIN_GRAFANA_VERSION]: 'data-testid RefreshPicker interval button',\n    },\n  },\n  QueryTab: {\n    content: {\n      [MIN_GRAFANA_VERSION]: 'Query editor tab content',\n    },\n    queryInspectorButton: {\n      [MIN_GRAFANA_VERSION]: 'Query inspector button',\n    },\n    queryHistoryButton: {\n      '10.2.0': 'data-testid query-history-button',\n      [MIN_GRAFANA_VERSION]: 'query-history-button',\n    },\n    addQuery: {\n      '10.2.0': 'data-testid query-tab-add-query',\n      [MIN_GRAFANA_VERSION]: 'Query editor add query button',\n    },\n    addQueryFromLibrary: {\n      '11.5.0': 'data-testid query-tab-add-query-from-library',\n    },\n    queryGroupTopSection: {\n      '11.2.0': 'data-testid query group top section',\n    },\n    addExpression: {\n      '11.2.0': 'data-testid query-tab-add-expression',\n    },\n  },\n  QueryHistory: {\n    queryText: {\n      '9.0.0': 'Query text',\n    },\n  },\n  QueryEditorRows: {\n    rows: {\n      [MIN_GRAFANA_VERSION]: 'Query editor row',\n    },\n  },\n  QueryEditorRow: {\n    actionButton: {\n      '10.4.0': (title: string) => `data-testid ${title}`,\n    },\n    title: {\n      [MIN_GRAFANA_VERSION]: (refId: string) => `Query editor row title ${refId}`,\n    },\n    container: {\n      [MIN_GRAFANA_VERSION]: (refId: string) => `Query editor row ${refId}`,\n    },\n  },\n  AlertTab: {\n    content: {\n      '10.2.3': 'data-testid Alert editor tab content',\n      [MIN_GRAFANA_VERSION]: 'Alert editor tab content',\n    },\n  },\n  AlertRules: {\n    groupToggle: {\n      '11.0.0': 'data-testid group-collapse-toggle',\n    },\n    toggle: {\n      '11.0.0': 'data-testid collapse-toggle',\n    },\n    expandedContent: {\n      '11.0.0': 'data-testid expanded-content',\n    },\n    previewButton: {\n      '11.1.0': 'data-testid alert-rule preview-button',\n    },\n    ruleNameField: {\n      '11.1.0': 'data-testid alert-rule name-field',\n    },\n    newFolderButton: {\n      '11.1.0': 'data-testid alert-rule new-folder-button',\n    },\n    newFolderNameField: {\n      '11.1.0': 'data-testid alert-rule name-folder-name-field',\n    },\n    newFolderNameCreateButton: {\n      '11.1.0': 'data-testid alert-rule name-folder-name-create-button',\n    },\n    newEvaluationGroupButton: {\n      '11.1.0': 'data-testid alert-rule new-evaluation-group-button',\n    },\n    newEvaluationGroupName: {\n      '11.1.0': 'data-testid alert-rule new-evaluation-group-name',\n    },\n    newEvaluationGroupInterval: {\n      '11.1.0': 'data-testid alert-rule new-evaluation-group-interval',\n    },\n    newEvaluationGroupCreate: {\n      '11.1.0': 'data-testid alert-rule new-evaluation-group-create-button',\n    },\n    step: {\n      '11.5.0': (stepNo: string) => `data-testid alert-rule step-${stepNo}`,\n    },\n    stepAdvancedModeSwitch: {\n      '11.5.0': (stepNo: string) => `data-testid advanced-mode-switch step-${stepNo}`,\n    },\n  },\n  Alert: {\n    alertV2: {\n      [MIN_GRAFANA_VERSION]: (severity: string) => `data-testid Alert ${severity}`,\n    },\n  },\n  TransformTab: {\n    content: {\n      '10.1.0': 'data-testid Transform editor tab content',\n      [MIN_GRAFANA_VERSION]: 'Transform editor tab content',\n    },\n    newTransform: {\n      '10.1.0': (name: string) => `data-testid New transform ${name}`,\n    },\n    transformationEditor: {\n      '10.1.0': (name: string) => `data-testid Transformation editor ${name}`,\n    },\n    transformationEditorDebugger: {\n      '10.1.0': (name: string) => `data-testid Transformation editor debugger ${name}`,\n    },\n  },\n  Transforms: {\n    card: {\n      '10.1.0': (name: string) => `data-testid New transform ${name}`,\n    },\n    disableTransformationButton: {\n      '10.4.0': 'data-testid Disable transformation button',\n    },\n    Reduce: {\n      modeLabel: {\n        '10.2.3': 'data-testid Transform mode label',\n        [MIN_GRAFANA_VERSION]: 'Transform mode label',\n      },\n      calculationsLabel: {\n        '10.2.3': 'data-testid Transform calculations label',\n        [MIN_GRAFANA_VERSION]: 'Transform calculations label',\n      },\n    },\n    SpatialOperations: {\n      actionLabel: {\n        '9.1.2': 'root Action field property editor',\n      },\n      locationLabel: {\n        '10.2.0': 'root Location Mode field property editor',\n      },\n      location: {\n        autoOption: {\n          '9.1.2': 'Auto location option',\n        },\n        coords: {\n          option: {\n            '9.1.2': 'Coords location option',\n          },\n          latitudeFieldLabel: {\n            '9.1.2': 'root Latitude field field property editor',\n          },\n          longitudeFieldLabel: {\n            '9.1.2': 'root Longitude field field property editor',\n          },\n        },\n        geohash: {\n          option: {\n            '9.1.2': 'Geohash location option',\n          },\n          geohashFieldLabel: {\n            '9.1.2': 'root Geohash field field property editor',\n          },\n        },\n        lookup: {\n          option: {\n            '9.1.2': 'Lookup location option',\n          },\n          lookupFieldLabel: {\n            '9.1.2': 'root Lookup field field property editor',\n          },\n          gazetteerFieldLabel: {\n            '9.1.2': 'root Gazetteer field property editor',\n          },\n        },\n      },\n    },\n    searchInput: {\n      '10.2.3': 'data-testid search transformations',\n      [MIN_GRAFANA_VERSION]: 'search transformations',\n    },\n    noTransformationsMessage: {\n      '10.2.3': 'data-testid no transformations message',\n    },\n    addTransformationButton: {\n      '10.1.0': 'data-testid add transformation button',\n      [MIN_GRAFANA_VERSION]: 'add transformation button',\n    },\n    removeAllTransformationsButton: {\n      '10.4.0': 'data-testid remove all transformations button',\n    },\n  },\n  NavBar: {\n    Configuration: {\n      button: {\n        '9.5.0': 'Configuration',\n      },\n    },\n    Toggle: {\n      button: {\n        '10.2.3': 'data-testid Toggle menu',\n        [MIN_GRAFANA_VERSION]: 'Toggle menu',\n      },\n    },\n    Reporting: {\n      button: {\n        '9.5.0': 'Reporting',\n      },\n    },\n  },\n  NavMenu: {\n    Menu: {\n      '10.2.3': 'data-testid navigation mega-menu',\n    },\n    item: {\n      '9.5.0': 'data-testid Nav menu item',\n    },\n  },\n  NavToolbar: {\n    container: {\n      '9.4.0': 'data-testid Nav toolbar',\n    },\n    commandPaletteTrigger: {\n      '11.5.0': 'data-testid Command palette trigger',\n    },\n    shareDashboard: {\n      '11.1.0': 'data-testid Share dashboard',\n    },\n    markAsFavorite: {\n      '11.1.0': 'data-testid Mark as favorite',\n    },\n    editDashboard: {\n      editButton: {\n        '11.1.0': 'data-testid Edit dashboard button',\n      },\n      saveButton: {\n        '11.1.0': 'data-testid Save dashboard button',\n      },\n      exitButton: {\n        '11.1.0': 'data-testid Exit edit mode button',\n      },\n      settingsButton: {\n        '11.1.0': 'data-testid Dashboard settings',\n      },\n      addRowButton: {\n        '11.1.0': 'data-testid Add row button',\n      },\n      addLibraryPanelButton: {\n        '11.1.0': 'data-testid Add a panel from the panel library button',\n      },\n      addVisualizationButton: {\n        '11.1.0': 'data-testid Add new visualization menu item',\n      },\n      pastePanelButton: {\n        '11.1.0': 'data-testid Paste panel button',\n      },\n      discardChangesButton: {\n        '11.1.0': 'data-testid Discard changes button',\n      },\n      discardLibraryPanelButton: {\n        '11.1.0': 'data-testid Discard library panel button',\n      },\n      unlinkLibraryPanelButton: {\n        '11.1.0': 'data-testid Unlink library panel button',\n      },\n      saveLibraryPanelButton: {\n        '11.1.0': 'data-testid Save library panel button',\n      },\n      backToDashboardButton: {\n        '11.1.0': 'data-testid Back to dashboard button',\n      },\n    },\n  },\n\n  PageToolbar: {\n    container: { [MIN_GRAFANA_VERSION]: () => '.page-toolbar' },\n    item: {\n      [MIN_GRAFANA_VERSION]: (tooltip: string) => `${tooltip}`,\n    },\n    itemButton: {\n      '9.5.0': (title: string) => `data-testid ${title}`,\n    },\n  },\n  QueryEditorToolbarItem: {\n    button: {\n      [MIN_GRAFANA_VERSION]: (title: string) => `QueryEditor toolbar item button ${title}`,\n    },\n  },\n  BackButton: {\n    backArrow: {\n      '10.3.0': 'data-testid Go Back',\n      [MIN_GRAFANA_VERSION]: 'Go Back',\n    },\n  },\n  OptionsGroup: {\n    group: {\n      '11.1.0': (title?: string) => (title ? `data-testid Options group ${title}` : 'data-testid Options group'),\n      [MIN_GRAFANA_VERSION]: (title?: string) => (title ? `Options group ${title}` : 'Options group'),\n    },\n    toggle: {\n      '11.1.0': (title?: string) =>\n        title ? `data-testid Options group ${title} toggle` : 'data-testid Options group toggle',\n      [MIN_GRAFANA_VERSION]: (title?: string) => (title ? `Options group ${title} toggle` : 'Options group toggle'),\n    },\n  },\n  PluginVisualization: {\n    item: {\n      [MIN_GRAFANA_VERSION]: (title: string) => `Plugin visualization item ${title}`,\n    },\n    current: {\n      [MIN_GRAFANA_VERSION]: () => '[class*=\"-currentVisualizationItem\"]',\n    },\n  },\n  Select: {\n    menu: {\n      '11.5.0': 'data-testid Select menu',\n      [MIN_GRAFANA_VERSION]: 'Select options menu',\n    },\n    option: {\n      '11.1.0': 'data-testid Select option',\n      [MIN_GRAFANA_VERSION]: 'Select option',\n    },\n    toggleAllOptions: {\n      '11.3.0': 'data-testid toggle all options',\n    },\n    input: {\n      [MIN_GRAFANA_VERSION]: () => 'input[id*=\"time-options-input\"]',\n    },\n    singleValue: {\n      [MIN_GRAFANA_VERSION]: () => 'div[class*=\"-singleValue\"]',\n    },\n  },\n  FieldConfigEditor: {\n    content: {\n      [MIN_GRAFANA_VERSION]: 'Field config editor content',\n    },\n  },\n  OverridesConfigEditor: {\n    content: {\n      [MIN_GRAFANA_VERSION]: 'Field overrides editor content',\n    },\n  },\n  FolderPicker: {\n    containerV2: {\n      [MIN_GRAFANA_VERSION]: 'data-testid Folder picker select container',\n    },\n    input: {\n      '10.4.0': 'data-testid folder-picker-input',\n    },\n  },\n  ReadonlyFolderPicker: {\n    container: {\n      [MIN_GRAFANA_VERSION]: 'data-testid Readonly folder picker select container',\n    },\n  },\n  DataSourcePicker: {\n    container: {\n      '10.0.0': 'data-testid Data source picker select container',\n      '8.0.0': 'Data source picker select container',\n    },\n    inputV2: {\n      '10.1.0': 'data-testid Select a data source',\n      [MIN_GRAFANA_VERSION]: 'Select a data source',\n    },\n    dataSourceList: {\n      '10.4.0': 'data-testid Data source list dropdown',\n    },\n    advancedModal: {\n      dataSourceList: {\n        '10.4.0': 'data-testid Data source list',\n      },\n      builtInDataSourceList: {\n        '10.4.0': 'data-testid Built in data source list',\n      },\n    },\n  },\n  TimeZonePicker: {\n    containerV2: {\n      [MIN_GRAFANA_VERSION]: 'data-testid Time zone picker select container',\n    },\n    changeTimeSettingsButton: {\n      '11.0.0': 'data-testid Time zone picker Change time settings button',\n    },\n  },\n  WeekStartPicker: {\n    containerV2: {\n      [MIN_GRAFANA_VERSION]: 'data-testid Choose starting day of the week',\n    },\n    placeholder: {\n      [MIN_GRAFANA_VERSION]: 'Choose starting day of the week',\n    },\n  },\n  TraceViewer: {\n    spanBar: {\n      '9.0.0': 'data-testid SpanBar--wrapper',\n    },\n  },\n  QueryField: {\n    container: {\n      '10.3.0': 'data-testid Query field',\n      [MIN_GRAFANA_VERSION]: 'Query field',\n    },\n  },\n  QueryBuilder: {\n    queryPatterns: {\n      '10.3.0': 'data-testid Query patterns',\n      [MIN_GRAFANA_VERSION]: 'Query patterns',\n    },\n    labelSelect: {\n      '10.3.0': 'data-testid Select label',\n      [MIN_GRAFANA_VERSION]: 'Select label',\n    },\n    inputSelect: {\n      '11.1.0': 'data-testid Select label-input',\n    },\n    valueSelect: {\n      '10.3.0': 'data-testid Select value',\n      [MIN_GRAFANA_VERSION]: 'Select value',\n    },\n    matchOperatorSelect: {\n      '10.3.0': 'data-testid Select match operator',\n      [MIN_GRAFANA_VERSION]: 'Select match operator',\n    },\n  },\n  ValuePicker: {\n    button: {\n      '10.3.0': (name: string) => `data-testid Value picker button ${name}`,\n    },\n    select: {\n      '10.3.0': (name: string) => `data-testid Value picker select ${name}`,\n    },\n  },\n  Search: {\n    sectionV2: {\n      [MIN_GRAFANA_VERSION]: 'data-testid Search section',\n    },\n    itemsV2: {\n      [MIN_GRAFANA_VERSION]: 'data-testid Search items',\n    },\n    cards: {\n      [MIN_GRAFANA_VERSION]: 'data-testid Search cards',\n    },\n    collapseFolder: {\n      [MIN_GRAFANA_VERSION]: (sectionId: string) => `data-testid Collapse folder ${sectionId}`,\n    },\n    expandFolder: {\n      [MIN_GRAFANA_VERSION]: (sectionId: string) => `data-testid Expand folder ${sectionId}`,\n    },\n    dashboardItem: {\n      [MIN_GRAFANA_VERSION]: (item: string) => `data-testid Dashboard search item ${item}`,\n    },\n    dashboardCard: {\n      [MIN_GRAFANA_VERSION]: (item: string) => `data-testid Search card ${item}`,\n    },\n    folderHeader: {\n      '9.3.0': (folderName: string) => `data-testid Folder header ${folderName}`,\n    },\n    folderContent: {\n      '9.3.0': (folderName: string) => `data-testid Folder content ${folderName}`,\n    },\n    dashboardItems: {\n      [MIN_GRAFANA_VERSION]: 'data-testid Dashboard search item',\n    },\n  },\n  DashboardLinks: {\n    container: {\n      [MIN_GRAFANA_VERSION]: 'data-testid Dashboard link container',\n    },\n    dropDown: {\n      [MIN_GRAFANA_VERSION]: 'data-testid Dashboard link dropdown',\n    },\n    link: {\n      [MIN_GRAFANA_VERSION]: 'data-testid Dashboard link',\n    },\n  },\n  LoadingIndicator: {\n    icon: {\n      '10.4.0': 'data-testid Loading indicator',\n      [MIN_GRAFANA_VERSION]: 'Loading indicator',\n    },\n  },\n  CallToActionCard: {\n    buttonV2: {\n      [MIN_GRAFANA_VERSION]: (name: string) => `data-testid Call to action button ${name}`,\n    },\n  },\n  DataLinksContextMenu: {\n    singleLink: {\n      '10.3.0': 'data-testid Data link',\n      [MIN_GRAFANA_VERSION]: 'Data link',\n    },\n  },\n  DataLinksActionsTooltip: {\n    tooltipWrapper: {\n      '12.1.0': 'data-testid Data links actions tooltip wrapper',\n    },\n  },\n  CodeEditor: {\n    container: {\n      '10.2.3': 'data-testid Code editor container',\n      [MIN_GRAFANA_VERSION]: 'Code editor container',\n    },\n  },\n  ReactMonacoEditor: {\n    editorLazy: {\n      '11.1.0': 'data-testid ReactMonacoEditor editorLazy',\n    },\n  },\n  DashboardImportPage: {\n    textarea: {\n      [MIN_GRAFANA_VERSION]: 'data-testid-import-dashboard-textarea',\n    },\n    submit: {\n      [MIN_GRAFANA_VERSION]: 'data-testid-load-dashboard',\n    },\n  },\n  ImportDashboardForm: {\n    name: {\n      [MIN_GRAFANA_VERSION]: 'data-testid-import-dashboard-title',\n    },\n    submit: {\n      [MIN_GRAFANA_VERSION]: 'data-testid-import-dashboard-submit',\n    },\n  },\n  PanelAlertTabContent: {\n    content: {\n      '10.2.3': 'data-testid Unified alert editor tab content',\n      [MIN_GRAFANA_VERSION]: 'Unified alert editor tab content',\n    },\n  },\n  VisualizationPreview: {\n    card: {\n      [MIN_GRAFANA_VERSION]: (name: string) => `data-testid suggestion-${name}`,\n    },\n  },\n  ColorSwatch: {\n    name: {\n      [MIN_GRAFANA_VERSION]: 'data-testid-colorswatch',\n    },\n  },\n  DashboardRow: {\n    title: {\n      [MIN_GRAFANA_VERSION]: (title: string) => `data-testid dashboard-row-title-${title}`,\n    },\n  },\n  UserProfile: {\n    profileSaveButton: {\n      [MIN_GRAFANA_VERSION]: 'data-testid-user-profile-save',\n    },\n    preferencesSaveButton: {\n      [MIN_GRAFANA_VERSION]: 'data-testid-shared-prefs-save',\n    },\n    orgsTable: {\n      [MIN_GRAFANA_VERSION]: 'data-testid-user-orgs-table',\n    },\n    sessionsTable: {\n      [MIN_GRAFANA_VERSION]: 'data-testid-user-sessions-table',\n    },\n    extensionPointTabs: {\n      '10.2.3': 'data-testid-extension-point-tabs',\n    },\n    extensionPointTab: {\n      '10.2.3': (tabId: string) => `data-testid-extension-point-tab-${tabId}`,\n    },\n  },\n  FileUpload: {\n    inputField: {\n      '9.0.0': 'data-testid-file-upload-input-field',\n    },\n    fileNameSpan: {\n      '9.0.0': 'data-testid-file-upload-file-name',\n    },\n  },\n  DebugOverlay: {\n    wrapper: {\n      '9.2.0': 'debug-overlay',\n    },\n  },\n  OrgRolePicker: {\n    input: {\n      '9.5.0': 'Role',\n    },\n  },\n  AnalyticsToolbarButton: {\n    button: {\n      '9.5.0': 'Dashboard insights',\n    },\n  },\n  Variables: {\n    variableOption: {\n      '9.5.0': 'data-testid variable-option',\n    },\n    variableLinkWrapper: {\n      '11.1.1': 'data-testid variable-link-wrapper',\n    },\n  },\n  Annotations: {\n    annotationsTypeInput: {\n      '11.1.0': 'data-testid annotations-type-input',\n      [MIN_GRAFANA_VERSION]: 'annotations-type-input',\n    },\n    annotationsChoosePanelInput: {\n      '11.1.0': 'data-testid choose-panels-input',\n      [MIN_GRAFANA_VERSION]: 'choose-panels-input',\n    },\n    editor: {\n      testButton: {\n        '11.0.0': 'data-testid annotations-test-button',\n      },\n      resultContainer: {\n        '11.0.0': 'data-testid annotations-query-result-container',\n      },\n    },\n  },\n  Tooltip: {\n    container: {\n      '10.2.0': 'data-testid tooltip',\n    },\n  },\n  ReturnToPrevious: {\n    buttonGroup: {\n      '11.0.0': 'data-testid dismissable button group',\n    },\n    backButton: {\n      '11.0.0': 'data-testid back',\n    },\n    dismissButton: {\n      '11.0.0': 'data-testid dismiss',\n    },\n  },\n  SQLQueryEditor: {\n    selectColumn: {\n      '11.0.0': 'data-testid select-column',\n    },\n    selectColumnInput: { '11.0.0': 'data-testid select-column-input' },\n    selectFunctionParameter: { '11.0.0': (name: string) => `data-testid select-function-parameter-${name}` },\n    selectAggregation: {\n      '11.0.0': 'data-testid select-aggregation',\n    },\n    selectAggregationInput: { '11.0.0': 'data-testid select-aggregation-input' },\n    selectAlias: {\n      '11.0.0': 'data-testid select-alias',\n    },\n    selectAliasInput: { '11.0.0': 'data-testid select-alias-input' },\n    selectInputParameter: { '11.0.0': 'data-testid select-input-parameter' },\n    filterConjunction: {\n      '11.0.0': 'data-testid filter-conjunction',\n    },\n    filterField: {\n      '11.0.0': 'data-testid filter-field',\n    },\n    filterOperator: {\n      '11.0.0': 'data-testid filter-operator',\n    },\n    headerTableSelector: {\n      '11.0.0': 'data-testid header-table-selector',\n    },\n    headerFilterSwitch: {\n      '11.0.0': 'data-testid header-filter-switch',\n    },\n    headerGroupSwitch: {\n      '11.0.0': 'data-testid header-group-switch',\n    },\n    headerOrderSwitch: {\n      '11.0.0': 'data-testid header-order-switch',\n    },\n    headerPreviewSwitch: {\n      '11.0.0': 'data-testid header-preview-switch',\n    },\n  },\n  EntityNotFound: {\n    container: {\n      '11.2.0': 'data-testid entity-not-found',\n    },\n  },\n  Portal: {\n    container: {\n      '11.5.0': 'data-testid portal-container',\n    },\n  },\n} satisfies VersionedSelectorGroup;\n\nexport type VersionedComponents = typeof versionedComponents;\n","import { resolveSelectors } from '../resolver';\nimport { E2ESelectors } from '../types';\n\nimport { versionedComponents, VersionedComponents } from './components';\nimport { versionedPages, VersionedPages } from './pages';\n\nconst Pages = resolveSelectors(versionedPages);\nconst Components = resolveSelectors(versionedComponents);\nconst selectors = { pages: Pages, components: Components };\n\n/**\n * Exposes Pages, Component selectors and E2ESelectors type in package for easy use in e2e tests and in production code\n */\nexport {\n  Pages,\n  Components,\n  selectors,\n  versionedComponents,\n  versionedPages,\n  resolveSelectors,\n  type VersionedPages,\n  type VersionedComponents,\n  type E2ESelectors,\n};\n","import { VersionedSelectorGroup } from '../types';\n\nimport { MIN_GRAFANA_VERSION } from './constants';\n\n/**\n * Selectors grouped/defined in Pages\n */\nexport const versionedPages = {\n  Alerting: {\n    AddAlertRule: {\n      url: {\n        '10.1.0': '/alerting/new/alerting',\n        [MIN_GRAFANA_VERSION]: '/alerting/new',\n      },\n    },\n    EditAlertRule: {\n      url: {\n        [MIN_GRAFANA_VERSION]: (alertRuleUid: string) => `alerting/${alertRuleUid}/edit`,\n      },\n    },\n  },\n  Login: {\n    url: {\n      [MIN_GRAFANA_VERSION]: '/login',\n    },\n    username: {\n      '10.2.3': 'data-testid Username input field',\n      [MIN_GRAFANA_VERSION]: 'Username input field',\n    },\n    password: {\n      '10.2.3': 'data-testid Password input field',\n      [MIN_GRAFANA_VERSION]: 'Password input field',\n    },\n    submit: {\n      '10.2.3': 'data-testid Login button',\n      [MIN_GRAFANA_VERSION]: 'Login button',\n    },\n    skip: {\n      '10.2.3': 'data-testid Skip change password button',\n    },\n  },\n  PasswordlessLogin: {\n    url: {\n      [MIN_GRAFANA_VERSION]: '/login/passwordless/authenticate',\n    },\n    email: {\n      '10.2.3': 'data-testid Email input field',\n      [MIN_GRAFANA_VERSION]: 'Email input field',\n    },\n    submit: {\n      '10.2.3': 'data-testid PasswordlessLogin button',\n      [MIN_GRAFANA_VERSION]: 'PasswordlessLogin button',\n    },\n  },\n  Home: {\n    url: {\n      [MIN_GRAFANA_VERSION]: '/',\n    },\n  },\n  DataSource: {\n    name: {\n      '10.3.0': 'data-testid Data source settings page name input field',\n      [MIN_GRAFANA_VERSION]: 'Data source settings page name input field',\n    },\n    delete: {\n      [MIN_GRAFANA_VERSION]: 'Data source settings page Delete button',\n    },\n    readOnly: {\n      '10.3.0': 'data-testid Data source settings page read only message',\n      [MIN_GRAFANA_VERSION]: 'Data source settings page read only message',\n    },\n    saveAndTest: {\n      '10.0.0': 'data-testid Data source settings page Save and Test button',\n      [MIN_GRAFANA_VERSION]: 'Data source settings page Save and Test button',\n    },\n    alert: {\n      '10.3.0': 'data-testid Data source settings page Alert',\n      [MIN_GRAFANA_VERSION]: 'Data source settings page Alert',\n    },\n  },\n  DataSources: {\n    url: {\n      [MIN_GRAFANA_VERSION]: '/datasources',\n    },\n    dataSources: {\n      [MIN_GRAFANA_VERSION]: (dataSourceName: string) => `Data source list item ${dataSourceName}`,\n    },\n  },\n  EditDataSource: {\n    url: {\n      '9.5.0': (dataSourceUid: string) => `/datasources/edit/${dataSourceUid}`,\n    },\n    settings: {\n      '9.5.0': 'Datasource settings page basic settings',\n    },\n  },\n  AddDataSource: {\n    url: {\n      [MIN_GRAFANA_VERSION]: '/datasources/new',\n    },\n    dataSourcePluginsV2: {\n      '9.3.1': (pluginName: string) => `Add new data source ${pluginName}`,\n      [MIN_GRAFANA_VERSION]: (pluginName: string) => `Data source plugin item ${pluginName}`,\n    },\n  },\n  ConfirmModal: {\n    delete: {\n      '10.0.0': 'data-testid Confirm Modal Danger Button',\n      [MIN_GRAFANA_VERSION]: 'Confirm Modal Danger Button',\n    },\n  },\n  AddDashboard: {\n    url: {\n      [MIN_GRAFANA_VERSION]: '/dashboard/new',\n    },\n    itemButton: {\n      '9.5.0': (title: string) => `data-testid ${title}`,\n    },\n    addNewPanel: {\n      '11.1.0': 'data-testid Add new panel',\n      '8.0.0': 'Add new panel',\n      [MIN_GRAFANA_VERSION]: 'Add new panel',\n    },\n    itemButtonAddViz: {\n      [MIN_GRAFANA_VERSION]: 'Add new visualization menu item',\n    },\n    addNewRow: {\n      '11.1.0': 'data-testid Add new row',\n      [MIN_GRAFANA_VERSION]: 'Add new row',\n    },\n    addNewPanelLibrary: {\n      '11.1.0': 'data-testid Add new panel from panel library',\n      [MIN_GRAFANA_VERSION]: 'Add new panel from panel library',\n    },\n    Settings: {\n      Annotations: {\n        List: {\n          url: {\n            [MIN_GRAFANA_VERSION]: '/dashboard/new?orgId=1&editview=annotations',\n          },\n        },\n        Edit: {\n          url: {\n            [MIN_GRAFANA_VERSION]: (annotationIndex: string) =>\n              `/dashboard/new?editview=annotations&editIndex=${annotationIndex}`,\n          },\n        },\n      },\n      Variables: {\n        List: {\n          url: {\n            '11.3.0': '/dashboard/new?orgId=1&editview=variables',\n            [MIN_GRAFANA_VERSION]: '/dashboard/new?orgId=1&editview=templating',\n          },\n        },\n        Edit: {\n          url: {\n            '11.3.0': (editIndex: string) => `/dashboard/new?orgId=1&editview=variables&editIndex=${editIndex}`,\n            [MIN_GRAFANA_VERSION]: (editIndex: string) =>\n              `/dashboard/new?orgId=1&editview=templating&editIndex=${editIndex}`,\n          },\n        },\n      },\n    },\n  },\n  ImportDashboard: {\n    url: {\n      [MIN_GRAFANA_VERSION]: '/dashboard/import',\n    },\n  },\n  Dashboard: {\n    url: {\n      [MIN_GRAFANA_VERSION]: (uid: string) => `/d/${uid}`,\n    },\n    DashNav: {\n      nav: {\n        [MIN_GRAFANA_VERSION]: 'Dashboard navigation',\n      },\n      navV2: {\n        [MIN_GRAFANA_VERSION]: 'data-testid Dashboard navigation',\n      },\n      publicDashboardTag: {\n        '9.1.0': 'data-testid public dashboard tag',\n      },\n      shareButton: {\n        '10.4.0': 'data-testid share-button',\n      },\n      scrollContainer: {\n        '11.1.0': 'data-testid Dashboard canvas scroll container',\n      },\n      newShareButton: {\n        container: {\n          '11.1.0': 'data-testid new share button',\n        },\n        shareLink: {\n          '11.1.0': 'data-testid new share link-button',\n        },\n        arrowMenu: {\n          '11.1.0': 'data-testid new share button arrow menu',\n        },\n        menu: {\n          container: {\n            '11.1.0': 'data-testid new share button menu',\n          },\n          shareInternally: {\n            '11.1.0': 'data-testid new share button share internally',\n          },\n          shareExternally: {\n            '11.1.1': 'data-testid new share button share externally',\n          },\n          shareSnapshot: {\n            '11.2.0': 'data-testid new share button share snapshot',\n          },\n        },\n      },\n      NewExportButton: {\n        container: {\n          '11.2.0': 'data-testid new export button',\n        },\n        arrowMenu: {\n          '11.2.0': 'data-testid new export button arrow menu',\n        },\n        Menu: {\n          container: {\n            '11.2.0': 'data-testid new export button menu',\n          },\n          exportAsJson: {\n            '11.2.0': 'data-testid new export button export as json',\n          },\n        },\n      },\n      playlistControls: {\n        prev: {\n          '11.0.0': 'data-testid playlist previous dashboard button',\n        },\n        stop: {\n          '11.0.0': 'data-testid playlist stop dashboard button',\n        },\n        next: {\n          '11.0.0': 'data-testid playlist next dashboard button',\n        },\n      },\n    },\n    Controls: {\n      '11.1.0': 'data-testid dashboard controls',\n    },\n    SubMenu: {\n      submenu: {\n        [MIN_GRAFANA_VERSION]: 'Dashboard submenu',\n      },\n      submenuItem: {\n        [MIN_GRAFANA_VERSION]: 'data-testid template variable',\n      },\n      submenuItemLabels: {\n        [MIN_GRAFANA_VERSION]: (item: string) => `data-testid Dashboard template variables submenu Label ${item}`,\n      },\n      submenuItemValueDropDownValueLinkTexts: {\n        [MIN_GRAFANA_VERSION]: (item: string) =>\n          `data-testid Dashboard template variables Variable Value DropDown value link text ${item}`,\n      },\n      submenuItemValueDropDownDropDown: {\n        [MIN_GRAFANA_VERSION]: 'Variable options',\n      },\n      submenuItemValueDropDownOptionTexts: {\n        [MIN_GRAFANA_VERSION]: (item: string) =>\n          `data-testid Dashboard template variables Variable Value DropDown option text ${item}`,\n      },\n      Annotations: {\n        annotationsWrapper: {\n          '10.0.0': 'data-testid annotation-wrapper',\n        },\n        annotationLabel: {\n          '10.0.0': (label: string) => `data-testid Dashboard annotations submenu Label ${label}`,\n        },\n        annotationToggle: {\n          '10.0.0': (label: string) => `data-testid Dashboard annotations submenu Toggle ${label}`,\n        },\n      },\n    },\n    Settings: {\n      Actions: {\n        close: {\n          '9.5.0': 'data-testid dashboard-settings-close',\n        },\n      },\n      General: {\n        deleteDashBoard: {\n          '11.1.0': 'data-testid Dashboard settings page delete dashboard button',\n        },\n        sectionItems: {\n          [MIN_GRAFANA_VERSION]: (item: string) => `Dashboard settings section item ${item}`,\n        },\n        saveDashBoard: {\n          [MIN_GRAFANA_VERSION]: 'Dashboard settings aside actions Save button',\n        },\n        saveAsDashBoard: {\n          [MIN_GRAFANA_VERSION]: 'Dashboard settings aside actions Save As button',\n        },\n        title: {\n          '11.2.0': 'General',\n        },\n      },\n      Annotations: {\n        Edit: {\n          urlParams: {\n            [MIN_GRAFANA_VERSION]: (annotationIndex: string) => `editview=annotations&editIndex=${annotationIndex}`,\n          },\n        },\n        List: {\n          url: {\n            [MIN_GRAFANA_VERSION]: (dashboardUid: string) => `/d/${dashboardUid}?editview=annotations`,\n          },\n          addAnnotationCTAV2: {\n            [MIN_GRAFANA_VERSION]: 'data-testid Call to action button Add annotation query',\n          },\n          annotations: {\n            '10.4.0': 'data-testid list-annotations',\n          },\n        },\n        Settings: {\n          name: {\n            '11.1.0': 'data-testid Annotations settings name input',\n            [MIN_GRAFANA_VERSION]: 'Annotations settings name input',\n          },\n        },\n        NewAnnotation: {\n          panelFilterSelect: {\n            '10.0.0': 'data-testid annotations-panel-filter',\n          },\n          showInLabel: {\n            '11.1.0': 'data-testid show-in-label',\n          },\n          previewInDashboard: {\n            '10.0.0': 'data-testid annotations-preview',\n          },\n          delete: {\n            '10.4.0': 'data-testid annotations-delete',\n          },\n          apply: {\n            '10.4.0': 'data-testid annotations-apply',\n          },\n          enable: {\n            '10.4.0': 'data-testid annotation-enable',\n          },\n          hide: {\n            '10.4.0': 'data-testid annotation-hide',\n          },\n        },\n      },\n      Variables: {\n        List: {\n          url: {\n            '11.3.0': (dashboardUid: string) => `/d/${dashboardUid}?editview=variables`,\n            [MIN_GRAFANA_VERSION]: (dashboardUid: string) => `/d/${dashboardUid}?editview=templating`,\n          },\n          addVariableCTAV2: {\n            [MIN_GRAFANA_VERSION]: 'data-testid Call to action button Add variable',\n          },\n          newButton: {\n            [MIN_GRAFANA_VERSION]: 'Variable editor New variable button',\n          },\n          table: {\n            [MIN_GRAFANA_VERSION]: 'Variable editor Table',\n          },\n          tableRowNameFields: {\n            [MIN_GRAFANA_VERSION]: (variableName: string) => `Variable editor Table Name field ${variableName}`,\n          },\n          tableRowDefinitionFields: {\n            '10.1.0': (variableName: string) => `Variable editor Table Definition field ${variableName}`,\n          },\n          tableRowArrowUpButtons: {\n            [MIN_GRAFANA_VERSION]: (variableName: string) => `Variable editor Table ArrowUp button ${variableName}`,\n          },\n          tableRowArrowDownButtons: {\n            [MIN_GRAFANA_VERSION]: (variableName: string) => `Variable editor Table ArrowDown button ${variableName}`,\n          },\n          tableRowDuplicateButtons: {\n            [MIN_GRAFANA_VERSION]: (variableName: string) => `Variable editor Table Duplicate button ${variableName}`,\n          },\n          tableRowRemoveButtons: {\n            [MIN_GRAFANA_VERSION]: (variableName: string) => `Variable editor Table Remove button ${variableName}`,\n          },\n        },\n        Edit: {\n          urlParams: {\n            '11.3.0': (editIndex: string) => `editview=variables&editIndex=${editIndex}`,\n            [MIN_GRAFANA_VERSION]: (editIndex: string) => `editview=templating&editIndex=${editIndex}`,\n          },\n          General: {\n            headerLink: {\n              [MIN_GRAFANA_VERSION]: 'Variable editor Header link',\n            },\n            modeLabelNew: {\n              [MIN_GRAFANA_VERSION]: 'Variable editor Header mode New',\n            },\n            /**\n             * @deprecated\n             */\n            modeLabelEdit: {\n              [MIN_GRAFANA_VERSION]: 'Variable editor Header mode Edit',\n            },\n            generalNameInput: {\n              [MIN_GRAFANA_VERSION]: 'Variable editor Form Name field',\n            },\n            generalNameInputV2: {\n              [MIN_GRAFANA_VERSION]: 'data-testid Variable editor Form Name field',\n            },\n            generalTypeSelect: {\n              [MIN_GRAFANA_VERSION]: 'Variable editor Form Type select',\n            },\n            generalTypeSelectV2: {\n              [MIN_GRAFANA_VERSION]: 'data-testid Variable editor Form Type select',\n            },\n            generalLabelInput: {\n              [MIN_GRAFANA_VERSION]: 'Variable editor Form Label field',\n            },\n            generalLabelInputV2: {\n              [MIN_GRAFANA_VERSION]: 'data-testid Variable editor Form Label field',\n            },\n            generalHideSelect: {\n              [MIN_GRAFANA_VERSION]: 'Variable editor Form Hide select',\n            },\n            generalHideSelectV2: {\n              [MIN_GRAFANA_VERSION]: 'data-testid Variable editor Form Hide select',\n            },\n            selectionOptionsAllowCustomValueSwitch: {\n              [MIN_GRAFANA_VERSION]: 'data-testid Variable editor Form Allow Custom Value switch',\n            },\n            selectionOptionsMultiSwitch: {\n              '10.4.0': 'data-testid Variable editor Form Multi switch',\n              [MIN_GRAFANA_VERSION]: 'Variable editor Form Multi switch',\n            },\n            selectionOptionsIncludeAllSwitch: {\n              '10.4.0': 'data-testid Variable editor Form IncludeAll switch',\n              [MIN_GRAFANA_VERSION]: 'Variable editor Form IncludeAll switch',\n            },\n            selectionOptionsCustomAllInput: {\n              '10.4.0': 'data-testid Variable editor Form IncludeAll field',\n              [MIN_GRAFANA_VERSION]: 'Variable editor Form IncludeAll field',\n            },\n            previewOfValuesOption: {\n              '10.4.0': 'data-testid Variable editor Preview of Values option',\n              [MIN_GRAFANA_VERSION]: 'Variable editor Preview of Values option',\n            },\n            submitButton: {\n              '10.4.0': 'data-testid Variable editor Run Query button',\n              [MIN_GRAFANA_VERSION]: 'Variable editor Submit button',\n            },\n            applyButton: {\n              '9.3.0': 'data-testid Variable editor Apply button',\n            },\n          },\n          QueryVariable: {\n            closeButton: {\n              [MIN_GRAFANA_VERSION]: 'data-testid Query Variable editor close button',\n            },\n            editor: {\n              [MIN_GRAFANA_VERSION]: 'data-testid Query Variable editor',\n            },\n            previewButton: {\n              [MIN_GRAFANA_VERSION]: 'data-testid Query Variable editor preview button',\n            },\n            queryOptionsDataSourceSelect: {\n              '10.4.0': 'data-testid Select a data source',\n              '10.0.0': 'data-testid Data source picker select container',\n              [MIN_GRAFANA_VERSION]: 'Data source picker select container',\n            },\n            queryOptionsOpenButton: {\n              [MIN_GRAFANA_VERSION]: 'data-testid Query Variable editor open button',\n            },\n            queryOptionsRefreshSelect: {\n              [MIN_GRAFANA_VERSION]: 'Variable editor Form Query Refresh select',\n            },\n            queryOptionsRefreshSelectV2: {\n              [MIN_GRAFANA_VERSION]: 'data-testid Variable editor Form Query Refresh select',\n            },\n            queryOptionsRegExInput: {\n              [MIN_GRAFANA_VERSION]: 'Variable editor Form Query RegEx field',\n            },\n            queryOptionsRegExInputV2: {\n              [MIN_GRAFANA_VERSION]: 'data-testid Variable editor Form Query RegEx field',\n            },\n            queryOptionsSortSelect: {\n              [MIN_GRAFANA_VERSION]: 'Variable editor Form Query Sort select',\n            },\n            queryOptionsSortSelectV2: {\n              [MIN_GRAFANA_VERSION]: 'data-testid Variable editor Form Query Sort select',\n            },\n            queryOptionsQueryInput: {\n              '10.4.0': 'data-testid Variable editor Form Default Variable Query Editor textarea',\n            },\n            valueGroupsTagsEnabledSwitch: {\n              [MIN_GRAFANA_VERSION]: 'Variable editor Form Query UseTags switch',\n            },\n            valueGroupsTagsTagsQueryInput: {\n              [MIN_GRAFANA_VERSION]: 'Variable editor Form Query TagsQuery field',\n            },\n            valueGroupsTagsTagsValuesQueryInput: {\n              [MIN_GRAFANA_VERSION]: 'Variable editor Form Query TagsValuesQuery field',\n            },\n          },\n          ConstantVariable: {\n            constantOptionsQueryInput: {\n              [MIN_GRAFANA_VERSION]: 'Variable editor Form Constant Query field',\n            },\n            constantOptionsQueryInputV2: {\n              [MIN_GRAFANA_VERSION]: 'data-testid Variable editor Form Constant Query field',\n            },\n          },\n          DatasourceVariable: {\n            datasourceSelect: {\n              [MIN_GRAFANA_VERSION]: 'data-testid datasource variable datasource type',\n            },\n            nameFilter: {\n              [MIN_GRAFANA_VERSION]: 'data-testid datasource variable datasource name filter',\n            },\n          },\n          TextBoxVariable: {\n            textBoxOptionsQueryInput: {\n              [MIN_GRAFANA_VERSION]: 'Variable editor Form TextBox Query field',\n            },\n            textBoxOptionsQueryInputV2: {\n              [MIN_GRAFANA_VERSION]: 'data-testid Variable editor Form TextBox Query field',\n            },\n          },\n          CustomVariable: {\n            customValueInput: {\n              [MIN_GRAFANA_VERSION]: 'data-testid custom-variable-input',\n            },\n          },\n          IntervalVariable: {\n            intervalsValueInput: {\n              [MIN_GRAFANA_VERSION]: 'data-testid interval variable intervals input',\n            },\n            autoEnabledCheckbox: {\n              '10.4.0': 'data-testid interval variable auto value checkbox',\n            },\n            stepCountIntervalSelect: {\n              '10.4.0': 'data-testid interval variable step count input',\n            },\n            minIntervalInput: {\n              '10.4.0': 'data-testid interval variable mininum interval input',\n            },\n          },\n          GroupByVariable: {\n            dataSourceSelect: {\n              '10.4.0': 'data-testid Select a data source',\n            },\n            infoText: {\n              '10.4.0': 'data-testid group by variable info text',\n            },\n            modeToggle: {\n              '10.4.0': 'data-testid group by variable mode toggle',\n            },\n          },\n          AdHocFiltersVariable: {\n            datasourceSelect: {\n              '10.4.0': 'data-testid Select a data source',\n            },\n            infoText: {\n              '10.4.0': 'data-testid ad-hoc filters variable info text',\n            },\n            modeToggle: {\n              '11.0.0': 'data-testid ad-hoc filters variable mode toggle',\n            },\n          },\n        },\n      },\n    },\n    Annotations: {\n      marker: {\n        '10.0.0': 'data-testid annotation-marker',\n      },\n    },\n    Rows: {\n      Repeated: {\n        ConfigSection: {\n          warningMessage: {\n            '10.2.0': 'data-testid Repeated rows warning message',\n          },\n        },\n      },\n    },\n  },\n  Dashboards: {\n    url: {\n      [MIN_GRAFANA_VERSION]: '/dashboards',\n    },\n    dashboards: {\n      '10.2.0': (title: string) => `Dashboard search item ${title}`,\n    },\n    toggleView: {\n      [MIN_GRAFANA_VERSION]: 'data-testid radio-button',\n    },\n  },\n  SaveDashboardAsModal: {\n    newName: {\n      '10.2.0': 'Save dashboard title field',\n    },\n    save: {\n      '10.2.0': 'Save dashboard button',\n    },\n  },\n  SaveDashboardModal: {\n    save: {\n      '10.2.0': 'Dashboard settings Save Dashboard Modal Save button',\n    },\n    saveVariables: {\n      '10.2.0': 'Dashboard settings Save Dashboard Modal Save variables checkbox',\n    },\n    saveTimerange: {\n      '10.2.0': 'Dashboard settings Save Dashboard Modal Save timerange checkbox',\n    },\n    saveRefresh: {\n      '11.1.0': 'Dashboard settings Save Dashboard Modal Save refresh checkbox',\n    },\n  },\n  SharePanelModal: {\n    linkToRenderedImage: {\n      [MIN_GRAFANA_VERSION]: 'Link to rendered image',\n    },\n  },\n  ShareDashboardModal: {\n    PublicDashboard: {\n      WillBePublicCheckbox: {\n        '9.1.0': 'data-testid public dashboard will be public checkbox',\n      },\n      LimitedDSCheckbox: {\n        '9.1.0': 'data-testid public dashboard limited datasources checkbox',\n      },\n      CostIncreaseCheckbox: {\n        '9.1.0': 'data-testid public dashboard cost may increase checkbox',\n      },\n      PauseSwitch: {\n        '9.5.0': 'data-testid public dashboard pause switch',\n      },\n      EnableAnnotationsSwitch: {\n        '9.3.0': 'data-testid public dashboard on off switch for annotations',\n      },\n      CreateButton: {\n        '9.5.0': 'data-testid public dashboard create button',\n      },\n      DeleteButton: {\n        '9.3.0': 'data-testid public dashboard delete button',\n      },\n      CopyUrlInput: {\n        '9.1.0': 'data-testid public dashboard copy url input',\n      },\n      CopyUrlButton: {\n        '9.1.0': 'data-testid public dashboard copy url button',\n      },\n      SettingsDropdown: {\n        '10.1.0': 'data-testid public dashboard settings dropdown',\n      },\n      TemplateVariablesWarningAlert: {\n        '9.1.0': 'data-testid public dashboard disabled template variables alert',\n      },\n      UnsupportedDataSourcesWarningAlert: {\n        '9.5.0': 'data-testid public dashboard unsupported data sources alert',\n      },\n      NoUpsertPermissionsWarningAlert: {\n        '9.5.0': 'data-testid public dashboard no upsert permissions alert',\n      },\n      EnableTimeRangeSwitch: {\n        '9.4.0': 'data-testid public dashboard on off switch for time range',\n      },\n      EmailSharingConfiguration: {\n        Container: {\n          '9.5.0': 'data-testid email sharing config container',\n        },\n        ShareType: {\n          '9.5.0': 'data-testid public dashboard share type',\n        },\n        EmailSharingInput: {\n          '9.5.0': 'data-testid public dashboard email sharing input',\n        },\n        EmailSharingInviteButton: {\n          '9.5.0': 'data-testid public dashboard email sharing invite button',\n        },\n        EmailSharingList: {\n          '9.5.0': 'data-testid public dashboard email sharing list',\n        },\n        DeleteEmail: {\n          '9.5.0': 'data-testid public dashboard delete email button',\n        },\n        ReshareLink: {\n          '9.5.0': 'data-testid public dashboard reshare link button',\n        },\n      },\n    },\n    SnapshotScene: {\n      url: {\n        '11.1.0': (key: string) => `/dashboard/snapshot/${key}`,\n      },\n      PublishSnapshot: {\n        '11.1.0': 'data-testid publish snapshot button',\n      },\n      CopyUrlButton: {\n        '11.1.0': 'data-testid snapshot copy url button',\n      },\n      CopyUrlInput: {\n        '11.1.0': 'data-testid snapshot copy url input',\n      },\n    },\n  },\n  ShareDashboardDrawer: {\n    ShareInternally: {\n      container: {\n        '11.3.0': 'data-testid share internally drawer container',\n      },\n      lockTimeRangeSwitch: {\n        '11.3.0': 'data-testid share internally lock time range switch',\n      },\n      shortenUrlSwitch: {\n        '11.3.0': 'data-testid share internally shorten url switch',\n      },\n      copyUrlButton: {\n        '11.3.0': 'data-testid share internally copy url button',\n      },\n      SharePanel: {\n        preview: {\n          '11.5.0': 'data-testid share panel internally image generation preview',\n        },\n        widthInput: {\n          '11.5.0': 'data-testid share panel internally width input',\n        },\n        heightInput: {\n          '11.5.0': 'data-testid share panel internally height input',\n        },\n        scaleFactorInput: {\n          '11.5.0': 'data-testid share panel internally scale factor input',\n        },\n        generateImageButton: {\n          '11.5.0': 'data-testid share panel internally generate image button',\n        },\n        downloadImageButton: {\n          '11.5.0': 'data-testid share panel internally download image button',\n        },\n      },\n    },\n    ShareExternally: {\n      container: {\n        '11.3.0': 'data-testid share externally drawer container',\n      },\n      publicAlert: {\n        '11.3.0': 'data-testid public share alert',\n      },\n      emailSharingAlert: {\n        '11.3.0': 'data-testid email share alert',\n      },\n      shareTypeSelect: {\n        '11.3.0': 'data-testid share externally share type select',\n      },\n      Creation: {\n        PublicShare: {\n          createButton: {\n            '11.3.0': 'data-testid public share dashboard create button',\n          },\n          cancelButton: {\n            '11.3.0': 'data-testid public share dashboard cancel button',\n          },\n        },\n        EmailShare: {\n          createButton: {\n            '11.3.0': 'data-testid email share dashboard create button',\n          },\n          cancelButton: {\n            '11.3.0': 'data-testid email share dashboard cancel button',\n          },\n        },\n        willBePublicCheckbox: {\n          '11.3.0': 'data-testid share dashboard will be public checkbox',\n        },\n      },\n      Configuration: {\n        enableTimeRangeSwitch: {\n          '11.3.0': 'data-testid share externally enable time range switch',\n        },\n        enableAnnotationsSwitch: {\n          '11.3.0': 'data-testid share externally enable annotations switch',\n        },\n        copyUrlButton: {\n          '11.3.0': 'data-testid share externally copy url button',\n        },\n        revokeAccessButton: {\n          '11.3.0': 'data-testid share externally revoke access button',\n        },\n        toggleAccessButton: {\n          '11.3.0': 'data-testid share externally pause or resume access button',\n        },\n      },\n    },\n    ShareSnapshot: {\n      url: {\n        '11.3.0': (key: string) => `/dashboard/snapshot/${key}`,\n      },\n      container: {\n        '11.3.0': 'data-testid share snapshot drawer container',\n      },\n      publishSnapshot: {\n        '11.3.0': 'data-testid share snapshot publish button',\n      },\n      copyUrlButton: {\n        '11.3.0': 'data-testid share snapshot copy url button',\n      },\n    },\n  },\n  ExportDashboardDrawer: {\n    ExportAsJson: {\n      container: {\n        '11.3.0': 'data-testid export as json drawer container',\n      },\n      codeEditor: {\n        '11.3.0': 'data-testid export as json code editor',\n      },\n      exportExternallyToggle: {\n        '11.3.0': 'data-testid export as json externally switch',\n      },\n      saveToFileButton: {\n        '11.3.0': 'data-testid export as json save to file button',\n      },\n      copyToClipboardButton: {\n        '11.3.0': 'data-testid export as json copy to clipboard button',\n      },\n      cancelButton: {\n        '11.3.0': 'data-testid export as json cancel button',\n      },\n    },\n  },\n  PublicDashboard: {\n    page: {\n      '9.5.0': 'public-dashboard-page',\n    },\n    NotAvailable: {\n      container: {\n        '9.5.0': 'public-dashboard-not-available',\n      },\n      title: {\n        '9.5.0': 'public-dashboard-title',\n      },\n      pausedDescription: {\n        '9.5.0': 'public-dashboard-paused-description',\n      },\n    },\n    footer: {\n      '11.0.0': 'public-dashboard-footer',\n    },\n  },\n  PublicDashboardScene: {\n    loadingPage: {\n      '11.0.0': 'public-dashboard-scene-loading-page',\n    },\n    page: {\n      '11.0.0': 'public-dashboard-scene-page',\n    },\n    controls: {\n      '11.0.0': 'public-dashboard-controls',\n    },\n  },\n  RequestViewAccess: {\n    form: {\n      '9.5.0': 'request-view-access-form',\n    },\n    recipientInput: {\n      '9.5.0': 'request-view-access-recipient-input',\n    },\n    submitButton: {\n      '9.5.0': 'request-view-access-submit-button',\n    },\n  },\n  PublicDashboardConfirmAccess: {\n    submitButton: {\n      '10.2.0': 'data-testid confirm-access-submit-button',\n    },\n  },\n  Explore: {\n    url: {\n      [MIN_GRAFANA_VERSION]: '/explore',\n    },\n    General: {\n      container: {\n        [MIN_GRAFANA_VERSION]: 'data-testid Explore',\n      },\n      graph: {\n        [MIN_GRAFANA_VERSION]: 'Explore Graph',\n      },\n      table: {\n        [MIN_GRAFANA_VERSION]: 'Explore Table',\n      },\n      scrollView: {\n        '9.0.0': 'data-testid explorer scroll view',\n      },\n      addFromQueryLibrary: {\n        '11.5.0': 'data-testid explore add from query library button',\n      },\n    },\n    QueryHistory: {\n      container: {\n        '11.1.0': 'data-testid QueryHistory',\n      },\n    },\n  },\n  SoloPanel: {\n    url: {\n      [MIN_GRAFANA_VERSION]: (page: string) => `/d-solo/${page}`,\n    },\n  },\n  PluginsList: {\n    page: {\n      [MIN_GRAFANA_VERSION]: 'Plugins list page',\n    },\n    list: {\n      [MIN_GRAFANA_VERSION]: 'Plugins list',\n    },\n    listItem: {\n      [MIN_GRAFANA_VERSION]: 'Plugins list item',\n    },\n    signatureErrorNotice: {\n      '10.3.0': 'data-testid Unsigned plugins notice',\n      [MIN_GRAFANA_VERSION]: 'Unsigned plugins notice',\n    },\n  },\n  PluginPage: {\n    page: {\n      [MIN_GRAFANA_VERSION]: 'Plugin page',\n    },\n    signatureInfo: {\n      '10.3.0': 'data-testid Plugin signature info',\n      [MIN_GRAFANA_VERSION]: 'Plugin signature info',\n    },\n    disabledInfo: {\n      '10.3.0': 'data-testid Plugin disabled info',\n      [MIN_GRAFANA_VERSION]: 'Plugin disabled info',\n    },\n  },\n  PlaylistForm: {\n    name: {\n      [MIN_GRAFANA_VERSION]: 'Playlist name',\n    },\n    interval: {\n      [MIN_GRAFANA_VERSION]: 'Playlist interval',\n    },\n    itemDelete: {\n      '10.2.0': 'data-testid playlist-form-delete-item',\n    },\n  },\n  BrowseDashboards: {\n    table: {\n      body: {\n        '10.2.0': 'data-testid browse-dashboards-table',\n      },\n      row: {\n        '10.2.0': (name: string) => `data-testid browse dashboards row ${name}`,\n      },\n      checkbox: {\n        '10.0.0': (uid: string) => `data-testid ${uid} checkbox`,\n      },\n    },\n    NewFolderForm: {\n      form: {\n        '10.2.0': 'data-testid new folder form',\n      },\n      nameInput: {\n        '10.2.0': 'data-testid new-folder-name-input',\n      },\n      createButton: {\n        '10.2.0': 'data-testid new-folder-create-button',\n      },\n    },\n  },\n  SearchDashboards: {\n    table: {\n      '10.2.0': 'Search results table',\n    },\n  },\n  Search: {\n    url: {\n      '9.3.0': '/?search=openn',\n    },\n    FolderView: {\n      url: {\n        '9.3.0': '/?search=open&layout=folders',\n      },\n    },\n  },\n  PublicDashboards: {\n    ListItem: {\n      linkButton: {\n        '9.3.0': 'public-dashboard-link-button',\n      },\n      configButton: {\n        '9.3.0': 'public-dashboard-configuration-button',\n      },\n      trashcanButton: {\n        '9.3.0': 'public-dashboard-remove-button',\n      },\n      pauseSwitch: {\n        '10.1.0': 'data-testid public dashboard pause switch',\n      },\n    },\n  },\n  UserListPage: {\n    tabs: {\n      allUsers: {\n        '10.0.0': 'data-testid all-users-tab',\n      },\n      orgUsers: {\n        '10.0.0': 'data-testid org-users-tab',\n      },\n      anonUserDevices: {\n        '10.2.3': 'data-testid anon-user-devices-tab',\n      },\n      publicDashboardsUsers: {\n        '10.0.0': 'data-testid public-dashboards-users-tab',\n      },\n      users: {\n        '10.0.0': 'data-testid users-tab',\n      },\n    },\n    org: {\n      url: {\n        '10.2.0': '/admin/users',\n        '9.5.0': '/org/users',\n      },\n    },\n    admin: {\n      url: {\n        '9.5.0': '/admin/users',\n      },\n    },\n    publicDashboards: {\n      container: {\n        '11.1.0': 'data-testid public-dashboards-users-list',\n      },\n    },\n    UserListAdminPage: {\n      container: {\n        '10.0.0': 'data-testid user-list-admin-page',\n      },\n    },\n    UsersListPage: {\n      container: {\n        '10.0.0': 'data-testid users-list-page',\n      },\n    },\n    UserAnonListPage: {\n      container: {\n        '10.4.0': 'data-testid user-anon-list-page',\n      },\n    },\n    UsersListPublicDashboardsPage: {\n      container: {\n        '10.0.0': 'data-testid users-list-public-dashboards-page',\n      },\n      DashboardsListModal: {\n        listItem: {\n          '10.0.0': (uid: string) => `data-testid dashboards-list-item-${uid}`,\n        },\n      },\n    },\n  },\n  ProfilePage: {\n    url: {\n      '10.2.0': '/profile',\n    },\n  },\n  Plugin: {\n    url: {\n      [MIN_GRAFANA_VERSION]: (pluginId: string) => `/plugins/${pluginId}`,\n    },\n  },\n  MigrateToCloud: {\n    url: {\n      '11.2.0': '/admin/migrate-to-cloud',\n    },\n  },\n} satisfies VersionedSelectorGroup;\n\nexport type VersionedPages = typeof versionedPages;\n","import { css } from '@emotion/css';\nimport { useRef, useEffect } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Trans } from '@grafana/i18n';\nimport { Button, Icon, Modal, useStyles2 } from '@grafana/ui';\n\ntype ConfirmModalProps = {\n  isOpen: boolean;\n  onCancel?: () => void;\n  onDiscard?: () => void;\n  onCopy?: () => void;\n};\nexport function ConfirmModal({ isOpen, onCancel, onDiscard, onCopy }: ConfirmModalProps) {\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const styles = useStyles2(getStyles);\n\n  // Moved from grafana/ui\n  useEffect(() => {\n    // for some reason autoFocus property did no work on this button, but this does\n    if (isOpen) {\n      buttonRef.current?.focus();\n    }\n  }, [isOpen]);\n\n  return (\n    <Modal\n      title={\n        <div className={styles.modalHeaderTitle}>\n          <Icon name=\"exclamation-triangle\" size=\"lg\" />\n          <span className={styles.titleText}>\n            <Trans i18nKey=\"grafana-sql.components.confirm-modal.warning\">Warning</Trans>\n          </span>\n        </div>\n      }\n      onDismiss={onCancel}\n      isOpen={isOpen}\n    >\n      <p>\n        <Trans i18nKey=\"grafana-sql.components.confirm-modal.builder-mode\">\n          Builder mode does not display changes made in code. The query builder will display the last changes you made\n          in builder mode.\n        </Trans>\n      </p>\n      <p>\n        <Trans i18nKey=\"grafana-sql.components.confirm-modal.clipboard\">\n          Do you want to copy your code to the clipboard?\n        </Trans>\n      </p>\n      <Modal.ButtonRow>\n        <Button type=\"button\" variant=\"secondary\" onClick={onCancel} fill=\"outline\">\n          <Trans i18nKey=\"grafana-sql.components.confirm-modal.cancel\">Cancel</Trans>\n        </Button>\n        <Button variant=\"destructive\" type=\"button\" onClick={onDiscard} ref={buttonRef}>\n          <Trans i18nKey=\"grafana-sql.components.confirm-modal.discard-code-and-switch\">Discard code and switch</Trans>\n        </Button>\n        <Button variant=\"primary\" onClick={onCopy}>\n          <Trans i18nKey=\"grafana-sql.components.confirm-modal.copy-code-and-switch\">Copy code and switch</Trans>\n        </Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  titleText: css({\n    paddingLeft: theme.spacing(2),\n  }),\n  modalHeaderTitle: css({\n    fontSize: theme.typography.size.lg,\n    float: 'left',\n    paddingTop: theme.spacing(1),\n    margin: theme.spacing(0, 2),\n  }),\n});\n","import { useEffect } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { SelectableValue } from '@grafana/data';\nimport { t } from '@grafana/i18n';\nimport { Select } from '@grafana/ui';\n\nimport { DB, ResourceSelectorProps, SQLDialect, toOption } from '../types';\n\nimport { isSqlDatasourceDatabaseSelectionFeatureFlagEnabled } from './QueryEditorFeatureFlag.utils';\n\nexport interface DatasetSelectorProps extends ResourceSelectorProps {\n  db: DB;\n  dataset: string | undefined;\n  preconfiguredDataset: string;\n  dialect: SQLDialect;\n  onChange: (v: SelectableValue) => void;\n  inputId?: string | undefined;\n}\n\nexport const DatasetSelector = ({\n  dataset,\n  db,\n  dialect,\n  onChange,\n  inputId,\n  preconfiguredDataset,\n}: DatasetSelectorProps) => {\n  /*\n    The behavior of this component - for MSSQL and MySQL datasources - is based on whether the user chose to create a datasource\n    with or without a default database (preconfiguredDataset). If the user configured a default database, this selector\n    should only allow that single preconfigured database option to be selected. If the user chose to NOT assign/configure a default database,\n    then the user should be able to use this component to choose between multiple databases available to the datasource.\n  */\n  // `hasPreconfigCondition` is true if either 1) the sql datasource has a preconfigured default database,\n  // OR if 2) the datasource is Postgres. In either case the only option available to the user is the preconfigured database.\n  const hasPreconfigCondition = !!preconfiguredDataset || dialect === 'postgres';\n\n  const state = useAsync(async () => {\n    if (isSqlDatasourceDatabaseSelectionFeatureFlagEnabled()) {\n      // If a default database is already configured for a MSSQL or MySQL data source, OR the data source is Postgres, no need to fetch other databases.\n      if (hasPreconfigCondition) {\n        // Set the current database to the preconfigured database.\n        onChange(toOption(preconfiguredDataset));\n        return [toOption(preconfiguredDataset)];\n      }\n    }\n\n    // If there is no preconfigured database, but there is a selected dataset, set the current database to the selected dataset.\n    if (dataset) {\n      onChange(toOption(dataset));\n    }\n\n    // Otherwise, fetch all databases available to the datasource.\n    const datasets = await db.datasets();\n    return datasets.map(toOption);\n  }, []);\n\n  useEffect(() => {\n    if (!isSqlDatasourceDatabaseSelectionFeatureFlagEnabled()) {\n      // Set default dataset when values are fetched\n      if (!dataset) {\n        if (state.value && state.value[0]) {\n          onChange(state.value[0]);\n        }\n      } else {\n        if (state.value && state.value.find((v) => v.value === dataset) === undefined) {\n          // if value is set and newly fetched values does not contain selected value\n          if (state.value.length > 0) {\n            onChange(state.value[0]);\n          }\n        }\n      }\n    }\n  }, [state.value, onChange, dataset]);\n\n  return (\n    <Select\n      aria-label={t('grafana-sql.components.dataset-selector.aria-label-dataset-selector', 'Dataset selector')}\n      inputId={inputId}\n      value={dataset}\n      options={state.value}\n      onChange={onChange}\n      disabled={state.loading}\n      isLoading={state.loading}\n      menuShouldPortal={true}\n    />\n  );\n};\n","import { useAsync } from 'react-use';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { t } from '@grafana/i18n';\nimport { Select } from '@grafana/ui';\n\nimport { DB, ResourceSelectorProps } from '../types';\n\nexport interface TableSelectorProps extends ResourceSelectorProps {\n  db: DB;\n  table: string | undefined;\n  dataset: string | undefined;\n  onChange: (v: SelectableValue) => void;\n  inputId?: string | undefined;\n}\n\nexport const TableSelector = ({ db, dataset, table, className, onChange, inputId }: TableSelectorProps) => {\n  const state = useAsync(async () => {\n    // No need to attempt to fetch tables for an unknown dataset.\n    if (!dataset) {\n      return [];\n    }\n\n    const tables = await db.tables(dataset);\n    return tables.map(toOption);\n  }, [dataset]);\n\n  return (\n    <Select\n      className={className}\n      disabled={state.loading}\n      aria-label={t('grafana-sql.components.table-selector.aria-label-table-selector', 'Table selector')}\n      inputId={inputId}\n      data-testid={selectors.components.SQLQueryEditor.headerTableSelector}\n      value={table}\n      options={state.value}\n      onChange={onChange}\n      isLoading={state.loading}\n      menuShouldPortal={true}\n      placeholder={\n        state.loading\n          ? t('grafana-sql.components.table-selector.placeholder-loading', 'Loading tables')\n          : t('grafana-sql.components.table-selector.placeholder-select-table', 'Select table')\n      }\n      allowCustomValue={true}\n    />\n  );\n};\n","import { useCallback, useId, useState } from 'react';\nimport { useCopyToClipboard } from 'react-use';\n\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { t, Trans } from '@grafana/i18n';\nimport { EditorField, EditorHeader, EditorMode, EditorRow, FlexItem, InlineSelect } from '@grafana/plugin-ui';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, InlineSwitch, RadioButtonGroup, Tooltip, Space } from '@grafana/ui';\n\nimport { QueryWithDefaults } from '../defaults';\nimport { SQLQuery, QueryFormat, QueryRowFilter, QUERY_FORMAT_OPTIONS, DB, SQLDialect } from '../types';\n\nimport { ConfirmModal } from './ConfirmModal';\nimport { DatasetSelector } from './DatasetSelector';\nimport { isSqlDatasourceDatabaseSelectionFeatureFlagEnabled } from './QueryEditorFeatureFlag.utils';\nimport { TableSelector } from './TableSelector';\n\nexport interface QueryHeaderProps {\n  db: DB;\n  dialect: SQLDialect;\n  isQueryRunnable: boolean;\n  onChange: (query: SQLQuery) => void;\n  onQueryRowChange: (queryRowFilter: QueryRowFilter) => void;\n  onRunQuery: () => void;\n  preconfiguredDataset: string;\n  query: QueryWithDefaults;\n  queryRowFilter: QueryRowFilter;\n}\n\nexport function QueryHeader({\n  db,\n  dialect,\n  isQueryRunnable,\n  onChange,\n  onQueryRowChange,\n  onRunQuery,\n  preconfiguredDataset,\n  query,\n  queryRowFilter,\n}: QueryHeaderProps) {\n  const { editorMode } = query;\n  const [_, copyToClipboard] = useCopyToClipboard();\n  const [showConfirm, setShowConfirm] = useState(false);\n  const toRawSql = db.toRawSql;\n\n  const htmlId = useId();\n\n  const editorModes = [\n    {\n      label: t('grafana-sql.components.query-header.editor-modes.label-builder', 'Builder'),\n      value: EditorMode.Builder,\n    },\n    { label: t('grafana-sql.components.query-header.editor-modes.label-code', 'Code'), value: EditorMode.Code },\n  ];\n\n  const onEditorModeChange = useCallback(\n    (newEditorMode: EditorMode) => {\n      if (newEditorMode === EditorMode.Code) {\n        reportInteraction('grafana_sql_editor_mode_changed', {\n          datasource: query.datasource?.type,\n          selectedEditorMode: EditorMode.Code,\n        });\n      }\n\n      if (editorMode === EditorMode.Code) {\n        setShowConfirm(true);\n        return;\n      }\n      onChange({ ...query, editorMode: newEditorMode });\n    },\n    [editorMode, onChange, query]\n  );\n\n  const onFormatChange = (e: SelectableValue) => {\n    const next = { ...query, format: e.value !== undefined ? e.value : QueryFormat.Table };\n\n    reportInteraction('grafana_sql_format_changed', {\n      datasource: query.datasource?.type,\n      selectedFormat: next.format,\n    });\n    onChange(next);\n  };\n\n  const onDatasetChange = (e: SelectableValue) => {\n    if (e.value === query.dataset) {\n      return;\n    }\n\n    const next = {\n      ...query,\n      dataset: e.value,\n      table: undefined,\n      sql: undefined,\n      rawSql: '',\n    };\n\n    onChange(next);\n  };\n\n  const onTableChange = (e: SelectableValue) => {\n    if (e.value === query.table) {\n      return;\n    }\n\n    const next: SQLQuery = {\n      ...query,\n      table: e.value,\n      sql: undefined,\n      rawSql: '',\n    };\n\n    onChange(next);\n  };\n\n  const datasetDropdownIsAvailable = () => {\n    if (dialect === 'influx') {\n      return false;\n    }\n    // If the feature flag is DISABLED, && the datasource is Postgres (`dialect = 'postgres`),\n    // we want to hide the dropdown - as per previous behavior.\n    if (!isSqlDatasourceDatabaseSelectionFeatureFlagEnabled() && dialect === 'postgres') {\n      return false;\n    }\n\n    return true;\n  };\n\n  return (\n    <>\n      <EditorHeader>\n        <InlineSelect\n          label={t('grafana-sql.components.query-header.label-format', 'Format')}\n          value={query.format}\n          placeholder={t('grafana-sql.components.query-header.placeholder-select-format', 'Select format')}\n          menuShouldPortal\n          onChange={onFormatChange}\n          options={QUERY_FORMAT_OPTIONS}\n        />\n\n        {editorMode === EditorMode.Builder && (\n          <>\n            <InlineSwitch\n              id={`sql-filter-${htmlId}`}\n              label={t('grafana-sql.components.query-header.label-filter', 'Filter')}\n              data-testid={selectors.components.SQLQueryEditor.headerFilterSwitch}\n              transparent={true}\n              showLabel={true}\n              value={queryRowFilter.filter}\n              onChange={(ev) => {\n                if (!(ev.target instanceof HTMLInputElement)) {\n                  return;\n                }\n\n                reportInteraction('grafana_sql_filter_toggled', {\n                  datasource: query.datasource?.type,\n                  displayed: ev.target.checked,\n                });\n\n                onQueryRowChange({ ...queryRowFilter, filter: ev.target.checked });\n              }}\n            />\n\n            <InlineSwitch\n              id={`sql-group-${htmlId}`}\n              label={t('grafana-sql.components.query-header.label-group', 'Group')}\n              data-testid={selectors.components.SQLQueryEditor.headerGroupSwitch}\n              transparent={true}\n              showLabel={true}\n              value={queryRowFilter.group}\n              onChange={(ev) => {\n                if (!(ev.target instanceof HTMLInputElement)) {\n                  return;\n                }\n\n                reportInteraction('grafana_sql_group_toggled', {\n                  datasource: query.datasource?.type,\n                  displayed: ev.target.checked,\n                });\n\n                onQueryRowChange({ ...queryRowFilter, group: ev.target.checked });\n              }}\n            />\n\n            <InlineSwitch\n              id={`sql-order-${htmlId}`}\n              label={t('grafana-sql.components.query-header.label-order', 'Order')}\n              data-testid={selectors.components.SQLQueryEditor.headerOrderSwitch}\n              transparent={true}\n              showLabel={true}\n              value={queryRowFilter.order}\n              onChange={(ev) => {\n                if (!(ev.target instanceof HTMLInputElement)) {\n                  return;\n                }\n\n                reportInteraction('grafana_sql_order_toggled', {\n                  datasource: query.datasource?.type,\n                  displayed: ev.target.checked,\n                });\n\n                onQueryRowChange({ ...queryRowFilter, order: ev.target.checked });\n              }}\n            />\n\n            <InlineSwitch\n              id={`sql-preview-${htmlId}`}\n              label={t('grafana-sql.components.query-header.label-preview', 'Preview')}\n              data-testid={selectors.components.SQLQueryEditor.headerPreviewSwitch}\n              transparent={true}\n              showLabel={true}\n              value={queryRowFilter.preview}\n              onChange={(ev) => {\n                if (!(ev.target instanceof HTMLInputElement)) {\n                  return;\n                }\n\n                reportInteraction('grafana_sql_preview_toggled', {\n                  datasource: query.datasource?.type,\n                  displayed: ev.target.checked,\n                });\n\n                onQueryRowChange({ ...queryRowFilter, preview: ev.target.checked });\n              }}\n            />\n          </>\n        )}\n\n        <FlexItem grow={1} />\n\n        {isQueryRunnable ? (\n          <Button icon=\"play\" variant=\"primary\" size=\"sm\" onClick={() => onRunQuery()}>\n            <Trans i18nKey=\"grafana-sql.components.query-header.run-query\">Run query</Trans>\n          </Button>\n        ) : (\n          <Tooltip\n            theme=\"error\"\n            content={\n              <Trans i18nKey=\"grafana-sql.components.query-header.content-invalid-query\">\n                Your query is invalid. Check below for details. <br />\n                However, you can still run this query.\n              </Trans>\n            }\n            placement=\"top\"\n          >\n            <Button icon=\"exclamation-triangle\" variant=\"secondary\" size=\"sm\" onClick={() => onRunQuery()}>\n              <Trans i18nKey=\"grafana-sql.components.query-header.run-query\">Run query</Trans>\n            </Button>\n          </Tooltip>\n        )}\n\n        <RadioButtonGroup options={editorModes} size=\"sm\" value={editorMode} onChange={onEditorModeChange} />\n\n        <ConfirmModal\n          isOpen={showConfirm}\n          onCopy={() => {\n            reportInteraction('grafana_sql_editor_mode_changed', {\n              datasource: query.datasource?.type,\n              selectedEditorMode: EditorMode.Builder,\n              type: 'copy',\n            });\n\n            setShowConfirm(false);\n            copyToClipboard(query.rawSql!);\n            onChange({\n              ...query,\n              rawSql: toRawSql(query),\n              editorMode: EditorMode.Builder,\n            });\n          }}\n          onDiscard={() => {\n            reportInteraction('grafana_sql_editor_mode_changed', {\n              datasource: query.datasource?.type,\n              selectedEditorMode: EditorMode.Builder,\n              type: 'discard',\n            });\n\n            setShowConfirm(false);\n            onChange({\n              ...query,\n              rawSql: toRawSql(query),\n              editorMode: EditorMode.Builder,\n            });\n          }}\n          onCancel={() => {\n            reportInteraction('grafana_sql_editor_mode_changed', {\n              datasource: query.datasource?.type,\n              selectedEditorMode: EditorMode.Builder,\n              type: 'cancel',\n            });\n\n            setShowConfirm(false);\n          }}\n        />\n      </EditorHeader>\n\n      {editorMode === EditorMode.Builder && (\n        <>\n          <Space v={0.5} />\n          <EditorRow>\n            {datasetDropdownIsAvailable() && (\n              <EditorField label={t('grafana-sql.components.query-header.label-dataset', 'Dataset')} width={25}>\n                <DatasetSelector\n                  db={db}\n                  inputId={`sql-dataset-${htmlId}`}\n                  dataset={query.dataset}\n                  dialect={dialect}\n                  preconfiguredDataset={preconfiguredDataset}\n                  onChange={onDatasetChange}\n                />\n              </EditorField>\n            )}\n            <EditorField label={t('grafana-sql.components.query-header.label-table', 'Table')} width={25}>\n              <TableSelector\n                db={db}\n                inputId={`sql-tableselect-${htmlId}`}\n                dataset={query.dataset || preconfiguredDataset}\n                table={query.table}\n                onChange={onTableChange}\n              />\n            </EditorField>\n          </EditorRow>\n        </>\n      )}\n    </>\n  );\n}\n","import { useCallback, useEffect, useRef } from 'react';\nimport * as React from 'react';\n\nimport { LanguageDefinition, SQLEditor } from '@grafana/plugin-ui';\n\nimport { SQLQuery } from '../../types';\n\ntype Props = {\n  query: SQLQuery;\n  onChange: (value: SQLQuery, processQuery: boolean) => void;\n  children?: (props: { formatQuery: () => void }) => React.ReactNode;\n  width?: number;\n  height?: number;\n  editorLanguageDefinition: LanguageDefinition;\n};\n\nexport function QueryEditorRaw({ children, onChange, query, width, height, editorLanguageDefinition }: Props) {\n  // We need to pass query via ref to SQLEditor as onChange is executed via monacoEditor.onDidChangeModelContent callback, not onChange property\n  const queryRef = useRef<SQLQuery>(query);\n  useEffect(() => {\n    queryRef.current = query;\n  }, [query]);\n\n  const onRawQueryChange = useCallback(\n    (rawSql: string, processQuery: boolean) => {\n      const newQuery = {\n        ...queryRef.current,\n        rawQuery: true,\n        rawSql,\n      };\n      onChange(newQuery, processQuery);\n    },\n    [onChange]\n  );\n\n  return (\n    <SQLEditor\n      width={width}\n      height={height}\n      query={query.rawSql!}\n      onChange={onRawQueryChange}\n      language={editorLanguageDefinition}\n    >\n      {children}\n    </SQLEditor>\n  );\n}\n","import { css } from '@emotion/css';\nimport { useState, useMemo, useEffect } from 'react';\nimport { useAsyncFn, useDebounce } from 'react-use';\n\nimport { formattedValueToString, getValueFormat, TimeRange } from '@grafana/data';\nimport { Trans } from '@grafana/i18n';\nimport { Icon, Spinner, useTheme2 } from '@grafana/ui';\n\nimport { DB, SQLQuery, ValidationResults } from '../../types';\n\nexport interface QueryValidatorProps {\n  db: DB;\n  query: SQLQuery;\n  range?: TimeRange;\n  onValidate: (isValid: boolean) => void;\n}\n\nexport function QueryValidator({ db, query, onValidate, range }: QueryValidatorProps) {\n  const [validationResult, setValidationResult] = useState<ValidationResults | null>();\n  const theme = useTheme2();\n  const valueFormatter = useMemo(() => getValueFormat('bytes'), []);\n\n  const styles = useMemo(() => {\n    return {\n      error: css({\n        color: theme.colors.error.text,\n        fontSize: theme.typography.bodySmall.fontSize,\n        fontFamily: theme.typography.fontFamilyMonospace,\n      }),\n      valid: css({\n        color: theme.colors.success.text,\n      }),\n      info: css({\n        color: theme.colors.text.secondary,\n      }),\n    };\n  }, [theme]);\n\n  const [state, validateQuery] = useAsyncFn(\n    async (q: SQLQuery) => {\n      if (q.rawSql?.trim() === '') {\n        return null;\n      }\n\n      return await db.validateQuery(q, range);\n    },\n    [db]\n  );\n\n  const [,] = useDebounce(\n    async () => {\n      const result = await validateQuery(query);\n      if (result) {\n        setValidationResult(result);\n      }\n\n      return null;\n    },\n    1000,\n    [query, validateQuery]\n  );\n\n  useEffect(() => {\n    if (validationResult?.isError) {\n      onValidate(false);\n    }\n    if (validationResult?.isValid) {\n      onValidate(true);\n    }\n  }, [validationResult, onValidate]);\n\n  if (!state.value && !state.loading) {\n    return null;\n  }\n\n  const error = state.value?.error ? processErrorMessage(state.value.error) : '';\n\n  return (\n    <>\n      {state.loading && (\n        <div className={styles.info}>\n          <Spinner inline={true} size=\"xs\" />{' '}\n          <Trans i18nKey=\"grafana-sql.components.query-validator.validating-query\">Validating query...</Trans>\n        </div>\n      )}\n      {!state.loading && state.value && (\n        <>\n          <>\n            {state.value.isValid && state.value.statistics && (\n              <div className={styles.valid}>\n                <Trans\n                  i18nKey=\"grafana-sql.components.query-validator.query-will-process\"\n                  values={{ bytes: formattedValueToString(valueFormatter(state.value.statistics.TotalBytesProcessed)) }}\n                >\n                  <Icon name=\"check\" /> This query will process <strong>{'{{bytes}}'}</strong> when run.\n                </Trans>\n              </div>\n            )}\n          </>\n\n          <>{state.value.isError && <div className={styles.error}>{error}</div>}</>\n        </>\n      )}\n    </>\n  );\n}\n\nfunction processErrorMessage(error: string) {\n  const splat = error.split(':');\n  if (splat.length > 2) {\n    return splat.slice(2).join(':');\n  }\n  return error;\n}\n","import { css } from '@emotion/css';\nimport { useMemo, useState } from 'react';\n\nimport { t } from '@grafana/i18n';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Stack, Icon, IconButton, Tooltip, useTheme2 } from '@grafana/ui';\n\nimport { QueryValidator, QueryValidatorProps } from './QueryValidator';\n\ninterface QueryToolboxProps extends Omit<QueryValidatorProps, 'onValidate'> {\n  showTools?: boolean;\n  isExpanded?: boolean;\n  onFormatCode?: () => void;\n  onExpand?: (expand: boolean) => void;\n  onValidate?: (isValid: boolean) => void;\n}\n\nexport function QueryToolbox({ showTools, onFormatCode, onExpand, isExpanded, ...validatorProps }: QueryToolboxProps) {\n  const theme = useTheme2();\n  const [validationResult, setValidationResult] = useState<boolean>();\n\n  const styles = useMemo(() => {\n    return {\n      container: css({\n        border: `1px solid ${theme.colors.border.medium}`,\n        borderTop: 'none',\n        padding: theme.spacing(0.5, 0.5, 0.5, 0.5),\n        display: 'flex',\n        flexGrow: 1,\n        justifyContent: 'space-between',\n        fontSize: theme.typography.bodySmall.fontSize,\n      }),\n      error: css({\n        color: theme.colors.error.text,\n        fontSize: theme.typography.bodySmall.fontSize,\n        fontFamily: theme.typography.fontFamilyMonospace,\n      }),\n      valid: css({\n        color: theme.colors.success.text,\n      }),\n      info: css({\n        color: theme.colors.text.secondary,\n      }),\n      hint: css({\n        color: theme.colors.text.disabled,\n        whiteSpace: 'nowrap',\n        cursor: 'help',\n      }),\n    };\n  }, [theme]);\n\n  let style = {};\n\n  if (!showTools && validationResult === undefined) {\n    style = { height: 0, padding: 0, visibility: 'hidden' };\n  }\n\n  return (\n    <div className={styles.container} style={style}>\n      <div>\n        {validatorProps.onValidate && (\n          <QueryValidator\n            {...validatorProps}\n            onValidate={(result: boolean) => {\n              setValidationResult(result);\n              validatorProps.onValidate!(result);\n            }}\n          />\n        )}\n      </div>\n      {showTools && (\n        <div>\n          <Stack gap={1}>\n            {onFormatCode && (\n              <IconButton\n                onClick={() => {\n                  reportInteraction('grafana_sql_query_formatted', {\n                    datasource: validatorProps.query.datasource?.type,\n                  });\n                  onFormatCode();\n                }}\n                name=\"brackets-curly\"\n                size=\"xs\"\n                tooltip={t('grafana-sql.components.query-toolbox.tooltip-format-query', 'Format query')}\n              />\n            )}\n            {onExpand && (\n              <IconButton\n                onClick={() => {\n                  reportInteraction('grafana_sql_editor_expand', {\n                    datasource: validatorProps.query.datasource?.type,\n                    expanded: !isExpanded,\n                  });\n\n                  onExpand(!isExpanded);\n                }}\n                name={isExpanded ? 'angle-up' : 'angle-down'}\n                size=\"xs\"\n                tooltip={\n                  isExpanded\n                    ? t('grafana-sql.components.query-toolbox.tooltip-collapse', 'Collapse editor')\n                    : t('grafana-sql.components.query-toolbox.tooltip-expand', 'Expand editor')\n                }\n              />\n            )}\n            <Tooltip\n              content={t(\n                'grafana-sql.components.query-toolbox.content-hit-ctrlcmdreturn-to-run-query',\n                'Hit CTRL/CMD+Return to run query'\n              )}\n            >\n              <Icon className={styles.hint} name=\"keyboard\" />\n            </Tooltip>\n          </Stack>\n        </div>\n      )}\n    </div>\n  );\n}\n","import { css } from '@emotion/css';\nimport { useMemo, useState } from 'react';\nimport { useMeasure } from 'react-use';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Trans, t } from '@grafana/i18n';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Modal, useStyles2, useTheme2 } from '@grafana/ui';\n\nimport { SQLQuery, QueryEditorProps } from '../../types';\n\nimport { QueryEditorRaw } from './QueryEditorRaw';\nimport { QueryToolbox } from './QueryToolbox';\n\ninterface RawEditorProps extends Omit<QueryEditorProps, 'onChange'> {\n  onRunQuery: () => void;\n  onChange: (q: SQLQuery, processQuery: boolean) => void;\n  onValidate: (isValid: boolean) => void;\n  queryToValidate: SQLQuery;\n}\n\nexport function RawEditor({ db, query, onChange, onRunQuery, onValidate, queryToValidate, range }: RawEditorProps) {\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [toolboxRef, toolboxMeasure] = useMeasure<HTMLDivElement>();\n  const [editorRef, editorMeasure] = useMeasure<HTMLDivElement>();\n\n  const editorLanguageDefinition = useMemo(() => db.getEditorLanguageDefinition(), [db]);\n\n  const renderQueryEditor = (width?: number, height?: number) => {\n    return (\n      <QueryEditorRaw\n        editorLanguageDefinition={editorLanguageDefinition}\n        query={query}\n        width={width}\n        height={height ? height - toolboxMeasure.height : undefined}\n        onChange={onChange}\n      >\n        {({ formatQuery }) => {\n          return (\n            <div ref={toolboxRef}>\n              <QueryToolbox\n                db={db}\n                query={queryToValidate}\n                onValidate={onValidate}\n                onFormatCode={formatQuery}\n                showTools\n                range={range}\n                onExpand={setIsExpanded}\n                isExpanded={isExpanded}\n              />\n            </div>\n          );\n        }}\n      </QueryEditorRaw>\n    );\n  };\n\n  const renderEditor = (standalone = false) => {\n    return standalone ? (\n      <AutoSizer>\n        {({ width, height }) => {\n          return renderQueryEditor(width, height);\n        }}\n      </AutoSizer>\n    ) : (\n      <div ref={editorRef}>{renderQueryEditor()}</div>\n    );\n  };\n\n  const renderPlaceholder = () => {\n    return (\n      <div\n        style={{\n          width: editorMeasure.width,\n          height: editorMeasure.height,\n          background: theme.colors.background.primary,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        <Trans i18nKey=\"grafana-sql.components.raw-editor.render-placeholder.editing-in-expanded-code-editor\">\n          Editing in expanded code editor\n        </Trans>\n      </div>\n    );\n  };\n\n  return (\n    <>\n      {isExpanded ? renderPlaceholder() : renderEditor()}\n      {isExpanded && (\n        <Modal\n          title={t('grafana-sql.components.raw-editor.title-query-num', 'Query {{queryNum}}', {\n            queryNum: query.refId,\n          })}\n          closeOnBackdropClick={false}\n          closeOnEscape={false}\n          className={styles.modal}\n          contentClassName={styles.modalContent}\n          isOpen={isExpanded}\n          onDismiss={() => {\n            reportInteraction('grafana_sql_editor_expand', {\n              datasource: query.datasource?.type,\n              expanded: false,\n            });\n            setIsExpanded(false);\n          }}\n        >\n          {renderEditor(true)}\n        </Modal>\n      )}\n    </>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    modal: css({\n      width: '95vw',\n      height: '95vh',\n    }),\n    modalContent: css({\n      height: '100%',\n      paddingTop: 0,\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { useCopyToClipboard } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Trans, t } from '@grafana/i18n';\nimport { reportInteraction } from '@grafana/runtime';\nimport { CodeEditor, Field, IconButton, useStyles2 } from '@grafana/ui';\n\nimport { formatSQL } from '../../utils/formatSQL';\n\ntype PreviewProps = {\n  rawSql: string;\n  datasourceType?: string;\n};\n\nexport function Preview({ rawSql, datasourceType }: PreviewProps) {\n  // TODO: use zero index to give feedback about copy success\n  const [_, copyToClipboard] = useCopyToClipboard();\n  const styles = useStyles2(getStyles);\n\n  const copyPreview = (rawSql: string) => {\n    copyToClipboard(rawSql);\n    reportInteraction('grafana_sql_preview_copied', {\n      datasource: datasourceType,\n    });\n  };\n\n  const labelElement = (\n    <div className={styles.labelWrapper}>\n      <span className={styles.label}>\n        <Trans i18nKey=\"grafana-sql.components.preview.label-element.preview\">Preview</Trans>\n      </span>\n      <IconButton\n        tooltip={t('grafana-sql.components.preview.label-element.tooltip-copy-to-clipboard', 'Copy to clipboard')}\n        onClick={() => copyPreview(rawSql)}\n        name=\"copy\"\n      />\n    </div>\n  );\n\n  return (\n    <Field label={labelElement} className={styles.grow}>\n      <CodeEditor\n        language=\"sql\"\n        height={80}\n        value={formatSQL(rawSql)}\n        monacoOptions={{ scrollbar: { vertical: 'hidden' }, scrollBeyondLastLine: false }}\n        readOnly={true}\n        showMiniMap={false}\n      />\n    </Field>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    grow: css({ flexGrow: 1 }),\n    label: css({ fontSize: 12, fontWeight: theme.typography.fontWeightMedium }),\n    labelWrapper: css({ display: 'flex', justifyContent: 'space-between', paddingBottom: theme.spacing(0.5) }),\n  };\n}\n","import { SelectableValue } from '@grafana/data';\nimport { t } from '@grafana/i18n';\n\nimport { SQLQuery } from '../types';\n\nexport function getColumnsWithIndices(query: SQLQuery, fields: SelectableValue[]): SelectableValue[] {\n  if (!fields || !query.sql?.columns) {\n    return fields;\n  }\n\n  const options = query.sql.columns.map((c, i) => {\n    const value = c.name\n      ? `${c.name}(${c.parameters?.map((p) => p.name).join(', ')})`\n      : c.parameters?.map((p) => p.name).join(', ');\n    return {\n      value,\n      label: `${i + 1} - ${value}`,\n    };\n  });\n\n  return [\n    {\n      value: '',\n      label: t('grafana-sql.utils.get-columns-width-indices.label-selected-columns', 'Selected columns'),\n      options,\n      expanded: true,\n    },\n    ...fields,\n  ];\n}\n","import { useCallback } from 'react';\n\nimport { DB, SQLExpression, SQLQuery } from '../types';\n\ninterface UseSqlChange {\n  db: DB;\n  query: SQLQuery;\n  onQueryChange: (query: SQLQuery) => void;\n}\n\nexport function useSqlChange({ query, onQueryChange, db }: UseSqlChange) {\n  const onSqlChange = useCallback(\n    (sql: SQLExpression) => {\n      const toRawSql = db.toRawSql;\n      const rawSql = toRawSql({ sql, dataset: query.dataset, table: query.table, refId: query.refId });\n      const newQuery: SQLQuery = { ...query, sql, rawSql };\n      onQueryChange(newQuery);\n    },\n    [db, onQueryChange, query]\n  );\n\n  return { onSqlChange };\n}\n","import { useCallback } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { t } from '@grafana/i18n';\nimport { AccessoryButton, EditorList, InputGroup } from '@grafana/plugin-ui';\nimport { Select } from '@grafana/ui';\n\nimport { QueryEditorGroupByExpression } from '../../expressions';\nimport { SQLExpression } from '../../types';\nimport { setGroupByField } from '../../utils/sql.utils';\n\ninterface GroupByRowProps {\n  sql: SQLExpression;\n  onSqlChange: (sql: SQLExpression) => void;\n  columns?: Array<SelectableValue<string>>;\n}\n\nexport function GroupByRow({ sql, columns, onSqlChange }: GroupByRowProps) {\n  const onGroupByChange = useCallback(\n    (item: Array<Partial<QueryEditorGroupByExpression>>) => {\n      // As new (empty object) items come in, we need to make sure they have the correct type\n      const cleaned = item.map((v) => setGroupByField(v.property?.name));\n      const newSql = { ...sql, groupBy: cleaned };\n      onSqlChange(newSql);\n    },\n    [onSqlChange, sql]\n  );\n\n  return (\n    <EditorList\n      items={sql.groupBy!}\n      onChange={onGroupByChange}\n      renderItem={makeRenderColumn({\n        options: columns,\n      })}\n    />\n  );\n}\n\nfunction makeRenderColumn({ options }: { options?: Array<SelectableValue<string>> }) {\n  const renderColumn = function (\n    item: Partial<QueryEditorGroupByExpression>,\n    onChangeItem: (item: QueryEditorGroupByExpression) => void,\n    onDeleteItem: () => void\n  ) {\n    return (\n      <InputGroup>\n        <Select\n          value={item.property?.name ? toOption(item.property.name) : null}\n          aria-label={t('grafana-sql.components.make-render-column.render-column.aria-label-group-by', 'Group by')}\n          options={options}\n          menuShouldPortal\n          onChange={({ value }) => value && onChangeItem(setGroupByField(value))}\n        />\n        <AccessoryButton\n          title={t(\n            'grafana-sql.components.make-render-column.render-column.title-remove-group-by-column',\n            'Remove group by column'\n          )}\n          icon=\"times\"\n          variant=\"secondary\"\n          onClick={onDeleteItem}\n        />\n      </InputGroup>\n    );\n  };\n  return renderColumn;\n}\n","import { SelectableValue } from '@grafana/data';\n\nimport { QueryWithDefaults } from '../../defaults';\nimport { DB, SQLQuery } from '../../types';\nimport { getColumnsWithIndices } from '../../utils/getColumnsWithIndices';\nimport { useSqlChange } from '../../utils/useSqlChange';\n\nimport { GroupByRow } from './GroupByRow';\n\ninterface SQLGroupByRowProps {\n  fields: SelectableValue[];\n  query: QueryWithDefaults;\n  onQueryChange: (query: SQLQuery) => void;\n  db: DB;\n}\n\nexport function SQLGroupByRow({ fields, query, onQueryChange, db }: SQLGroupByRowProps) {\n  const { onSqlChange } = useSqlChange({ query, onQueryChange, db });\n  let columnsWithIndices: SelectableValue[] = getColumnsWithIndices(query, fields);\n  return <GroupByRow columns={columnsWithIndices} sql={query.sql!} onSqlChange={onSqlChange} />;\n}\n","import { uniqueId } from 'lodash';\nimport { useCallback } from 'react';\nimport * as React from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { t } from '@grafana/i18n';\nimport { EditorField, InputGroup } from '@grafana/plugin-ui';\nimport { Input, RadioButtonGroup, Select, Space } from '@grafana/ui';\n\nimport { SQLExpression } from '../../types';\nimport { setPropertyField } from '../../utils/sql.utils';\n\ntype OrderByRowProps = {\n  sql: SQLExpression;\n  onSqlChange: (sql: SQLExpression) => void;\n  columns?: Array<SelectableValue<string>>;\n  showOffset?: boolean;\n};\n\nconst sortOrderOptions = [\n  { description: 'Sort by ascending', value: 'ASC', icon: 'sort-amount-up' } as const,\n  { description: 'Sort by descending', value: 'DESC', icon: 'sort-amount-down' } as const,\n];\n\nexport function OrderByRow({ sql, onSqlChange, columns, showOffset }: OrderByRowProps) {\n  const onSortOrderChange = useCallback(\n    (item: 'ASC' | 'DESC') => {\n      const newSql: SQLExpression = { ...sql, orderByDirection: item };\n      onSqlChange(newSql);\n    },\n    [onSqlChange, sql]\n  );\n\n  const onLimitChange = useCallback(\n    (event: React.FormEvent<HTMLInputElement>) => {\n      const newSql: SQLExpression = { ...sql, limit: Number.parseInt(event.currentTarget.value, 10) };\n      onSqlChange(newSql);\n    },\n    [onSqlChange, sql]\n  );\n\n  const onOffsetChange = useCallback(\n    (event: React.FormEvent<HTMLInputElement>) => {\n      const newSql: SQLExpression = { ...sql, offset: Number.parseInt(event.currentTarget.value, 10) };\n      onSqlChange(newSql);\n    },\n    [onSqlChange, sql]\n  );\n\n  const onOrderByChange = useCallback(\n    (item: SelectableValue<string>) => {\n      const newSql: SQLExpression = { ...sql, orderBy: setPropertyField(item?.value) };\n      if (item === null) {\n        newSql.orderByDirection = undefined;\n      }\n      onSqlChange(newSql);\n    },\n    [onSqlChange, sql]\n  );\n\n  return (\n    <>\n      <EditorField label={t('grafana-sql.components.order-by-row.label-order-by', 'Order by')} width={25}>\n        <InputGroup>\n          <Select\n            aria-label={t('grafana-sql.components.order-by-row.aria-label-order-by', 'Order by')}\n            options={columns}\n            value={sql.orderBy?.property.name ? toOption(sql.orderBy.property.name) : null}\n            isClearable\n            menuShouldPortal\n            onChange={onOrderByChange}\n          />\n\n          <Space h={1.5} />\n\n          <RadioButtonGroup\n            options={sortOrderOptions}\n            disabled={!sql?.orderBy?.property.name}\n            value={sql.orderByDirection}\n            onChange={onSortOrderChange}\n          />\n        </InputGroup>\n      </EditorField>\n      <EditorField label={t('grafana-sql.components.order-by-row.label-limit', 'Limit')} optional width={25}>\n        <Input type=\"number\" min={0} id={uniqueId('limit-')} value={sql.limit || ''} onChange={onLimitChange} />\n      </EditorField>\n      {showOffset && (\n        <EditorField label={t('grafana-sql.components.order-by-row.label-offset', 'Offset')} optional width={25}>\n          <Input type=\"number\" id={uniqueId('offset-')} value={sql.offset || ''} onChange={onOffsetChange} />\n        </EditorField>\n      )}\n    </>\n  );\n}\n","import { SelectableValue } from '@grafana/data';\n\nimport { QueryWithDefaults } from '../../defaults';\nimport { DB, SQLQuery } from '../../types';\nimport { getColumnsWithIndices } from '../../utils/getColumnsWithIndices';\nimport { useSqlChange } from '../../utils/useSqlChange';\n\nimport { OrderByRow } from './OrderByRow';\n\ntype SQLOrderByRowProps = {\n  fields: SelectableValue[];\n  query: QueryWithDefaults;\n  onQueryChange: (query: SQLQuery) => void;\n  db: DB;\n};\n\nexport function SQLOrderByRow({ fields, query, onQueryChange, db }: SQLOrderByRowProps) {\n  const { onSqlChange } = useSqlChange({ query, onQueryChange, db });\n  let columnsWithIndices: SelectableValue[] = getColumnsWithIndices(query, fields);\n  return <OrderByRow sql={query.sql!} onSqlChange={onSqlChange} columns={columnsWithIndices} />;\n}\n","import {\n  BaseOperator,\n  BasicConfig,\n  Config,\n  Field,\n  ImmutableList,\n  JsonTree,\n  Operator,\n  OperatorOptionsI,\n  Settings,\n  Utils,\n  ValueSource,\n  WidgetProps,\n  Widgets,\n} from '@react-awesome-query-builder/ui';\nimport { isString } from 'lodash';\n\nimport { dateTime, toOption } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { t } from '@grafana/i18n';\nimport { Button, DateTimePicker, Input, Select } from '@grafana/ui';\n\nconst buttonLabels = {\n  add: 'Add',\n  remove: 'Remove',\n};\n\nexport const emptyInitTree: JsonTree = {\n  id: Utils.uuid(),\n  type: 'group',\n};\n\nconst TIME_FILTER = 'timeFilter';\nconst macros = [TIME_FILTER];\n\n// Widgets are the components rendered for each field type see the docs for more info\n// https://github.com/ukrbublik/react-awesome-query-builder/blob/master/CONFIG.adoc#configwidgets\nexport const widgets: Widgets = {\n  ...BasicConfig.widgets,\n  text: {\n    ...BasicConfig.widgets.text,\n    factory: function TextInput(props: WidgetProps) {\n      return (\n        <Input\n          value={props?.value || ''}\n          placeholder={props?.placeholder}\n          onChange={(e) => props?.setValue(e.currentTarget.value)}\n        />\n      );\n    },\n  },\n  number: {\n    ...BasicConfig.widgets.number,\n    factory: function NumberInput(props: WidgetProps) {\n      return (\n        <Input\n          value={props?.value}\n          placeholder={props?.placeholder}\n          type=\"number\"\n          onChange={(e) => props?.setValue(Number.parseInt(e.currentTarget.value, 10))}\n        />\n      );\n    },\n  },\n  datetime: {\n    ...BasicConfig.widgets.datetime,\n    factory: function DateTimeInput(props: WidgetProps) {\n      if (props?.operator === Op.MACROS) {\n        return (\n          <Select\n            id={props.id}\n            aria-label={t('grafana-sql.components.widgets.aria-label-macros-value-selector', 'Macros value selector')}\n            menuShouldPortal\n            options={macros.map(toOption)}\n            value={props?.value}\n            onChange={(val) => props.setValue(val.value)}\n          />\n        );\n      }\n      const dateValue = dateTime(props?.value).isValid() ? dateTime(props?.value).utc() : undefined;\n      return (\n        <DateTimePicker\n          onChange={(e) => {\n            props?.setValue(e?.format(BasicConfig.widgets.datetime.valueFormat));\n          }}\n          date={dateValue}\n        />\n      );\n    },\n    // Function for formatting widget’s value in SQL WHERE query.\n    sqlFormatValue: (val, field, widget, operator, operatorDefinition, rightFieldDef) => {\n      if (operator === Op.MACROS) {\n        if (macros.includes(val)) {\n          return val;\n        }\n        return undefined;\n      }\n\n      // This is just satisfying the type checker, this should never happen\n      if (\n        typeof BasicConfig.widgets.datetime.sqlFormatValue === 'string' ||\n        typeof BasicConfig.widgets.datetime.sqlFormatValue === 'object'\n      ) {\n        return undefined;\n      }\n      const func = BasicConfig.widgets.datetime.sqlFormatValue;\n      // We need to pass the ctx to this function this way so *this* is correct\n      return func?.call(BasicConfig.ctx, val, field, widget, operator, operatorDefinition, rightFieldDef) || '';\n    },\n  },\n};\n\n// Settings are the configuration options for the query builder see the docs for more info\n// https://github.com/ukrbublik/react-awesome-query-builder/blob/master/CONFIG.adoc#configsettings\nexport const settings: Settings = {\n  ...BasicConfig.settings,\n  canRegroup: false,\n  maxNesting: 1,\n  canReorder: false,\n  showNot: false,\n  addRuleLabel: buttonLabels.add,\n  deleteLabel: buttonLabels.remove,\n  // This is the component that renders conjunctions (logical operators)\n  renderConjs: function Conjunctions(conjProps) {\n    return (\n      <Select\n        id={conjProps?.id}\n        aria-label={t('grafana-sql.components.settings.aria-label-conjunction', 'Conjunction')}\n        data-testid={selectors.components.SQLQueryEditor.filterConjunction}\n        menuShouldPortal\n        options={conjProps?.conjunctionOptions ? Object.keys(conjProps?.conjunctionOptions).map(toOption) : undefined}\n        value={conjProps?.selectedConjunction}\n        onChange={(val) => conjProps?.setConjunction(val.value!)}\n      />\n    );\n  },\n  // This is the component that renders fields\n  renderField: function Field(fieldProps) {\n    const fields = fieldProps?.config?.fields || {};\n    return (\n      <Select\n        id={fieldProps?.id}\n        width={25}\n        aria-label={t('grafana-sql.components.settings.aria-label-field', 'Field')}\n        data-testid={selectors.components.SQLQueryEditor.filterField}\n        menuShouldPortal\n        options={fieldProps?.items.map((f) => {\n          // @ts-ignore\n          const icon = fields[f.key].mainWidgetProps?.customProps?.icon;\n          return {\n            label: f.label,\n            value: f.key,\n            icon,\n          };\n        })}\n        value={fieldProps?.selectedKey}\n        onChange={(val) => {\n          fieldProps?.setField(val.label!);\n        }}\n      />\n    );\n  },\n  // This is the component used for the Add/Remove buttons\n  renderButton: function RAQBButton(buttonProps) {\n    return (\n      <Button\n        type=\"button\"\n        title={t('grafana-sql.components.settings.title-button-filter', '{{ buttonLabel }} filter', {\n          buttonLabel: buttonProps?.label,\n        })}\n        onClick={buttonProps?.onClick}\n        variant=\"secondary\"\n        size=\"md\"\n        icon={buttonProps?.label === buttonLabels.add ? 'plus' : 'times'}\n      />\n    );\n  },\n  // This is the component used for the fields operator selector\n  renderOperator: function Operator(operatorProps) {\n    return (\n      <Select\n        options={operatorProps?.items.map((op) => ({ label: op.label, value: op.key }))}\n        aria-label={t('grafana-sql.components.settings.aria-label-operator', 'Operator')}\n        data-testid={selectors.components.SQLQueryEditor.filterOperator}\n        menuShouldPortal\n        value={operatorProps?.selectedKey}\n        onChange={(val) => {\n          operatorProps?.setField(val.value || '');\n        }}\n      />\n    );\n  },\n};\n\n// add IN / NOT IN operators to text to support multi-value variables\nconst enum Op {\n  IN = 'select_any_in',\n  NOT_IN = 'select_not_any_in',\n  MACROS = 'macros',\n}\nconst customOperators = getCustomOperators(BasicConfig);\nconst textWidget = BasicConfig.types.text.widgets.text;\nconst opers = [...(textWidget.operators || []), Op.IN, Op.NOT_IN];\nconst customTextWidget = {\n  ...textWidget,\n  operators: opers,\n};\n\nconst customTypes = {\n  ...BasicConfig.types,\n  text: {\n    ...BasicConfig.types.text,\n    widgets: {\n      ...BasicConfig.types.text.widgets,\n      text: customTextWidget,\n    },\n  },\n  datetime: {\n    ...BasicConfig.types.datetime,\n    widgets: {\n      ...BasicConfig.types.datetime.widgets,\n      datetime: {\n        ...BasicConfig.types.datetime.widgets.datetime,\n        operators: [Op.MACROS, ...(BasicConfig.types.datetime.widgets.datetime.operators || [])],\n      },\n    },\n  },\n};\n\n// This is the configuration for the query builder that doesn't include the fields but all the other configuration for the UI\n// Fields should be added dynamically based on returned data\n// See the doc for more info https://github.com/ukrbublik/react-awesome-query-builder/blob/master/CONFIG.adoc\nexport const raqbConfig: Config = {\n  ...BasicConfig,\n  widgets,\n  settings,\n  operators: customOperators,\n  types: customTypes,\n};\n\nexport type { Config };\n\nconst noop = () => '';\n\nfunction getCustomOperators(config: BasicConfig) {\n  const { ...supportedOperators } = config.operators;\n\n  // IN operator expects array, override IN formatter for multi-value variables\n  const sqlFormatInOp = supportedOperators[Op.IN].sqlFormatOp?.bind(config.ctx) || noop;\n  const formatInOp = supportedOperators[Op.IN].formatOp?.bind(config.ctx) || noop;\n  const customSqlInFormatter = (\n    field: string,\n    op: string,\n    value: string | string[] | ImmutableList<string>,\n    valueSrc: ValueSource | undefined,\n    valueType: string | undefined,\n    opDef: Operator | undefined,\n    operatorOptions: OperatorOptionsI | undefined,\n    fieldDef: Field | undefined\n  ) => {\n    return sqlFormatInOp(field, op, splitIfString(value), valueSrc, valueType, opDef, operatorOptions, fieldDef);\n  };\n\n  // NOT IN operator expects array, override NOT IN formatter for multi-value variables\n  const sqlFormatNotInOp = supportedOperators[Op.NOT_IN].sqlFormatOp?.bind(config.ctx) || noop;\n  const formatNotInOp = supportedOperators[Op.NOT_IN].formatOp?.bind(config.ctx) || noop;\n  const customSqlNotInFormatter = (\n    field: string,\n    op: string,\n    value: string | string[] | ImmutableList<string>,\n    valueSrc: ValueSource | undefined,\n    valueType: string | undefined,\n    opDef: Operator | undefined,\n    operatorOptions: OperatorOptionsI | undefined,\n    fieldDef: Field | undefined\n  ) => {\n    return sqlFormatNotInOp(field, op, splitIfString(value), valueSrc, valueType, opDef, operatorOptions, fieldDef);\n  };\n\n  const customOperators: Record<string, BaseOperator> = {\n    ...supportedOperators,\n    [Op.IN]: {\n      ...supportedOperators[Op.IN],\n      formatOp: (\n        field: string,\n        op: string,\n        value: string | string[] | ImmutableList<string>,\n        valueSrc?: ValueSource\n      ) => {\n        return formatInOp(field, op, splitIfString(value), valueSrc);\n      },\n      sqlFormatOp: customSqlInFormatter,\n    },\n    [Op.NOT_IN]: {\n      ...supportedOperators[Op.NOT_IN],\n      formatOp: (\n        field: string,\n        op: string,\n        value: string | string[] | ImmutableList<string>,\n        valueSrc?: ValueSource\n      ) => {\n        return formatNotInOp(field, op, splitIfString(value), valueSrc);\n      },\n      sqlFormatOp: customSqlNotInFormatter,\n    },\n    [Op.MACROS]: {\n      label: t('grafana-sql.components.get-custom-operators.custom-operators.label.macros', 'Macros'),\n      sqlFormatOp: (field: string, _operator: string, value: string | string[] | ImmutableList<string>) => {\n        if (value === TIME_FILTER) {\n          return `$__timeFilter(${field})`;\n        }\n        throw new Error('Invalid macro');\n      },\n    },\n  };\n\n  return customOperators;\n}\n\n// value: string | List<string> but AQB uses a different version of Immutable\nfunction splitIfString(value: string | string[] | ImmutableList<string>) {\n  if (isString(value)) {\n    return value.split(',');\n  }\n  return value;\n}\n","import { injectGlobal } from '@emotion/css';\nimport { Builder, Config, ImmutableTree, Query, Utils } from '@react-awesome-query-builder/ui';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { SQLExpression } from '../../types';\n\nimport { emptyInitTree, raqbConfig } from './AwesomeQueryBuilder';\n\ninterface SQLBuilderWhereRowProps {\n  sql: SQLExpression;\n  onSqlChange: (sql: SQLExpression) => void;\n  config?: Partial<Config>;\n}\n\nexport function WhereRow({ sql, config, onSqlChange }: SQLBuilderWhereRowProps) {\n  const [tree, setTree] = useState<ImmutableTree>();\n  const configWithDefaults = useMemo(() => ({ ...raqbConfig, ...config }), [config]);\n\n  useEffect(() => {\n    // Set the initial tree\n    if (!tree) {\n      const initTree = Utils.checkTree(Utils.loadTree(sql.whereJsonTree ?? emptyInitTree), configWithDefaults);\n      setTree(initTree);\n    }\n  }, [configWithDefaults, sql.whereJsonTree, tree]);\n\n  useEffect(() => {\n    if (!sql.whereJsonTree) {\n      setTree(Utils.checkTree(Utils.loadTree(emptyInitTree), configWithDefaults));\n    }\n  }, [configWithDefaults, sql.whereJsonTree]);\n\n  const onTreeChange = useCallback(\n    (changedTree: ImmutableTree, config: Config) => {\n      setTree(changedTree);\n      const newSql = {\n        ...sql,\n        whereJsonTree: Utils.getTree(changedTree),\n        whereString: Utils.sqlFormat(changedTree, config),\n      };\n\n      onSqlChange(newSql);\n    },\n    [onSqlChange, sql]\n  );\n\n  if (!tree) {\n    return null;\n  }\n\n  return (\n    <Query\n      {...configWithDefaults}\n      value={tree}\n      onChange={onTreeChange}\n      renderBuilder={(props) => <Builder {...props} />}\n    />\n  );\n}\n\nfunction flex(direction: string) {\n  return `\n    display: flex;\n    gap: 8px;\n    flex-direction: ${direction};`;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-expressions\ninjectGlobal`\n  .group--header {\n    ${flex('row')}\n  }\n\n  .group-or-rule {\n    ${flex('column')}\n    .rule {\n      flex-direction: row;\n    }\n  }\n\n  .rule--body {\n    ${flex('row')}\n  }\n\n  .group--children {\n    ${flex('column')}\n  }\n\n  .group--conjunctions:empty {\n    display: none;\n  }\n`;\n","import { useAsync } from 'react-use';\n\nimport { SelectableValue, TypedVariableModel } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\n\nimport { QueryWithDefaults } from '../../defaults';\nimport { DB, SQLExpression, SQLQuery, SQLSelectableValue } from '../../types';\nimport { useSqlChange } from '../../utils/useSqlChange';\n\nimport { Config } from './AwesomeQueryBuilder';\nimport { WhereRow } from './WhereRow';\n\ninterface WhereRowProps {\n  query: QueryWithDefaults;\n  fields: SelectableValue[];\n  onQueryChange: (query: SQLQuery) => void;\n  db: DB;\n}\n\nexport function SQLWhereRow({ query, fields, onQueryChange, db }: WhereRowProps) {\n  const state = useAsync(async () => {\n    return mapFieldsToTypes(fields);\n  }, [fields]);\n\n  const { onSqlChange } = useSqlChange({ query, onQueryChange, db });\n\n  return (\n    <WhereRow\n      // TODO: fix key that's used to force clean render or SQLWhereRow - otherwise it doesn't render operators correctly\n      key={JSON.stringify(state.value)}\n      config={{ fields: state.value || {} }}\n      sql={query.sql!}\n      onSqlChange={(val: SQLExpression) => {\n        const templateVars = getTemplateSrv().getVariables();\n\n        removeQuotesForMultiVariables(val, templateVars);\n\n        onSqlChange(val);\n      }}\n    />\n  );\n}\n\n// needed for awesome query builder\nfunction mapFieldsToTypes(columns: SQLSelectableValue[]) {\n  const fields: Config['fields'] = {};\n  for (const col of columns) {\n    fields[col.value] = {\n      type: col.raqbFieldType || 'text',\n      valueSources: ['value'],\n      mainWidgetProps: { customProps: { icon: col.icon } },\n    };\n  }\n  return fields;\n}\n\nexport function removeQuotesForMultiVariables(val: SQLExpression, templateVars: TypedVariableModel[]) {\n  const multiVariableInWhereString = (tv: TypedVariableModel) =>\n    'multi' in tv &&\n    tv.multi &&\n    (val.whereString?.includes(`\\${${tv.name}}`) || val.whereString?.includes(`$${tv.name}`));\n\n  if (templateVars.some((tv) => multiVariableInWhereString(tv))) {\n    val.whereString = val.whereString?.replaceAll(\"')\", ')');\n    val.whereString = val.whereString?.replaceAll(\"('\", '(');\n  }\n}\n","import { useId } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { t } from '@grafana/i18n';\nimport { EditorField } from '@grafana/plugin-ui';\nimport { Select } from '@grafana/ui';\n\ninterface Props {\n  columns: Array<SelectableValue<string>>;\n  onParameterChange: (value?: string) => void;\n  value: SelectableValue<string> | null;\n}\n\nexport function SelectColumn({ columns, onParameterChange, value }: Props) {\n  const selectInputId = useId();\n\n  return (\n    <EditorField label={t('grafana-sql.components.select-column.label-column', 'Column')} width={25}>\n      <Select\n        value={value}\n        data-testid={selectors.components.SQLQueryEditor.selectColumn}\n        inputId={selectInputId}\n        menuShouldPortal\n        options={[{ label: '*', value: '*' }, ...columns]}\n        allowCustomValue\n        onChange={(s) => onParameterChange(s.value)}\n      />\n    </EditorField>\n  );\n}\n","import { css } from '@emotion/css';\nimport { useCallback } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { t } from '@grafana/i18n';\nimport { Button, InlineLabel, Input, Stack, useStyles2 } from '@grafana/ui';\n\nimport { QueryEditorExpressionType } from '../../expressions';\nimport { SQLExpression, SQLQuery } from '../../types';\nimport { getColumnValue } from '../../utils/sql.utils';\n\nimport { SelectColumn } from './SelectColumn';\n\ninterface Props {\n  columns: Array<SelectableValue<string>>;\n  query: SQLQuery;\n  onSqlChange: (sql: SQLExpression) => void;\n  onParameterChange: (index: number) => (value?: string) => void;\n  currentColumnIndex: number;\n}\n\nexport function SelectCustomFunctionParameters({\n  columns,\n  query,\n  onSqlChange,\n  onParameterChange,\n  currentColumnIndex,\n}: Props) {\n  const styles = useStyles2(getStyles);\n  const macroOrFunction = query.sql?.columns?.[currentColumnIndex];\n\n  const addParameter = useCallback(\n    (index: number) => {\n      const item = query.sql?.columns?.[index];\n      if (!item) {\n        return;\n      }\n\n      item.parameters = item.parameters\n        ? [...item.parameters, { type: QueryEditorExpressionType.FunctionParameter, name: '' }]\n        : [];\n\n      const newSql: SQLExpression = {\n        ...query.sql,\n        columns: query.sql?.columns?.map((c, i) => (i === index ? item : c)),\n      };\n\n      onSqlChange(newSql);\n    },\n    [onSqlChange, query.sql]\n  );\n\n  const removeParameter = useCallback(\n    (columnIndex: number, index: number) => {\n      const item = query.sql?.columns?.[columnIndex];\n      if (!item?.parameters) {\n        return;\n      }\n      item.parameters = item.parameters?.filter((_, i) => i !== index);\n\n      const newSql: SQLExpression = {\n        ...query.sql,\n        columns: query.sql?.columns?.map((c, i) => (i === columnIndex ? item : c)),\n      };\n\n      onSqlChange(newSql);\n    },\n    [onSqlChange, query.sql]\n  );\n\n  function renderParameters(columnIndex: number) {\n    if (!macroOrFunction?.parameters || macroOrFunction.parameters.length <= 1) {\n      return null;\n    }\n\n    const paramComponents = macroOrFunction.parameters.map((param, index) => {\n      // Skip the first parameter as it is the column name\n      if (index === 0) {\n        return null;\n      }\n\n      return (\n        <Stack key={index} gap={2}>\n          <InlineLabel className={styles.label}>,</InlineLabel>\n          <Input\n            onChange={(e) => onParameterChange(index)(e.currentTarget.value)}\n            value={param.name}\n            aria-label={t(\n              'grafana-sql.components.select-custom-function-parameters.aria-label-parameter',\n              'Parameter {{index}} for column {{columnIndex}}',\n              { index, columnIndex }\n            )}\n            data-testid={selectors.components.SQLQueryEditor.selectInputParameter}\n            addonAfter={\n              <Button\n                title={t(\n                  'grafana-sql.components.select-custom-function-parameters.render-parameters.params.title-remove-parameter',\n                  'Remove parameter'\n                )}\n                type=\"button\"\n                icon=\"times\"\n                variant=\"secondary\"\n                size=\"md\"\n                onClick={() => removeParameter(columnIndex, index)}\n              />\n            }\n          />\n        </Stack>\n      );\n    });\n    return paramComponents;\n  }\n\n  return (\n    <>\n      <InlineLabel className={styles.label}>(</InlineLabel>\n      <SelectColumn\n        columns={columns}\n        onParameterChange={(s) => onParameterChange(0)(s)}\n        value={getColumnValue(macroOrFunction?.parameters?.[0])}\n      />\n      {renderParameters(currentColumnIndex)}\n      <Button\n        type=\"button\"\n        onClick={() => addParameter(currentColumnIndex)}\n        variant=\"secondary\"\n        size=\"md\"\n        icon=\"plus\"\n        title={t('grafana-sql.components.select-custom-function-parameters.title-add-parameter', 'Add parameter')}\n      />\n      <InlineLabel className={styles.label}>)</InlineLabel>\n    </>\n  );\n}\n\nconst getStyles = () => {\n  return {\n    label: css({\n      padding: 0,\n      margin: 0,\n      width: 'unset',\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport { useCallback, useEffect, useId, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorField } from '@grafana/plugin-ui';\nimport { InlineLabel, Input, Select, Stack, useStyles2 } from '@grafana/ui';\n\nimport { QueryEditorExpressionType } from '../../expressions';\nimport { DB, SQLExpression, SQLQuery } from '../../types';\nimport { getColumnValue } from '../../utils/sql.utils';\n\nimport { SelectColumn } from './SelectColumn';\nimport { SelectCustomFunctionParameters } from './SelectCustomFunctionParameters';\n\ninterface Props {\n  query: SQLQuery;\n  onSqlChange: (sql: SQLExpression) => void;\n  currentColumnIndex: number;\n  db: DB;\n  columns: Array<SelectableValue<string>>;\n}\n\nexport function SelectFunctionParameters({ query, onSqlChange, currentColumnIndex, db, columns }: Props) {\n  const selectInputId = useId();\n  const macroOrFunction = query.sql?.columns?.[currentColumnIndex];\n  const styles = useStyles2(getStyles);\n  const func = db.functions().find((f) => f.name === macroOrFunction?.name);\n\n  const [fieldsFromFunction, setFieldsFromFunction] = useState<Array<Array<SelectableValue<string>>>>([]);\n\n  useEffect(() => {\n    const getFieldsFromFunction = async () => {\n      if (!func) {\n        return;\n      }\n      const options: Array<Array<SelectableValue<string>>> = [];\n      for (const param of func.parameters ?? []) {\n        if (param.options) {\n          options.push(await param.options(query));\n        } else {\n          options.push([]);\n        }\n      }\n      setFieldsFromFunction(options);\n    };\n    getFieldsFromFunction();\n\n    // It is fine to ignore the warning here and omit the query object\n    // only table property is used in the query object and whenever table changes the component is re-rendered\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [macroOrFunction?.name]);\n\n  const onParameterChange = useCallback(\n    (index: number, keepIndex?: boolean) => (s: string | undefined) => {\n      const item = query.sql?.columns?.[currentColumnIndex];\n      if (!item) {\n        return;\n      }\n      if (!item.parameters) {\n        item.parameters = [];\n      }\n      if (item.parameters[index] === undefined) {\n        item.parameters[index] = { type: QueryEditorExpressionType.FunctionParameter, name: s };\n      } else if (s == null && keepIndex) {\n        // Remove value from index\n        item.parameters = item.parameters.map((p, i) => (i === index ? { ...p, name: '' } : p));\n        // Remove the last empty parameter\n        if (item.parameters[item.parameters.length - 1]?.name === '') {\n          item.parameters = item.parameters.filter((p) => p.name !== '');\n        }\n      } else if (s == null) {\n        item.parameters = item.parameters.filter((_, i) => i !== index);\n      } else {\n        item.parameters = item.parameters.map((p, i) => (i === index ? { ...p, name: s } : p));\n      }\n\n      const newSql: SQLExpression = {\n        ...query.sql,\n        columns: query.sql?.columns?.map((c, i) => (i === currentColumnIndex ? item : c)),\n      };\n\n      onSqlChange(newSql);\n    },\n    [currentColumnIndex, onSqlChange, query.sql]\n  );\n\n  function renderParametersWithFunctions() {\n    if (!func?.parameters) {\n      return null;\n    }\n\n    return func?.parameters.map((funcParam, index) => {\n      return (\n        <Stack key={index} alignItems=\"flex-end\" gap={2}>\n          <EditorField label={funcParam.name} width={25} optional={!funcParam.required}>\n            <>\n              {funcParam.options ? (\n                <Select\n                  value={getColumnValue(macroOrFunction?.parameters![index])}\n                  options={fieldsFromFunction?.[index]}\n                  data-testid={selectors.components.SQLQueryEditor.selectFunctionParameter(funcParam.name)}\n                  inputId={selectInputId}\n                  menuShouldPortal\n                  allowCustomValue\n                  isClearable\n                  onChange={(s) => onParameterChange(index, true)(s?.value)}\n                />\n              ) : (\n                <Input\n                  onChange={(e) => onParameterChange(index, true)(e.currentTarget.value)}\n                  value={macroOrFunction?.parameters![index]?.name}\n                  data-testid={selectors.components.SQLQueryEditor.selectInputParameter}\n                />\n              )}\n            </>\n          </EditorField>\n          {func.parameters!.length !== index + 1 && <InlineLabel className={styles.label}>,</InlineLabel>}\n        </Stack>\n      );\n    });\n  }\n\n  // This means that no function is selected, we render a column selector\n  if (macroOrFunction?.name === undefined) {\n    return (\n      <SelectColumn\n        columns={columns}\n        onParameterChange={(s) => onParameterChange(0)(s)}\n        value={getColumnValue(macroOrFunction?.parameters?.[0])}\n      />\n    );\n  }\n\n  // If the function is not found, that means that it might be a custom value\n  // we let the user add any number of parameters\n  if (!func) {\n    return (\n      <SelectCustomFunctionParameters\n        query={query}\n        onSqlChange={onSqlChange}\n        currentColumnIndex={currentColumnIndex}\n        columns={columns}\n        onParameterChange={onParameterChange}\n      />\n    );\n  }\n\n  // Else we render the function parameters based on the provided settings\n  return (\n    <>\n      <InlineLabel className={styles.label}>(</InlineLabel>\n      {renderParametersWithFunctions()}\n      <InlineLabel className={styles.label}>)</InlineLabel>\n    </>\n  );\n}\n\nconst getStyles = () => {\n  return {\n    label: css({\n      padding: 0,\n      margin: 0,\n      width: 'unset',\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport { uniqueId } from 'lodash';\nimport { useCallback } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { t } from '@grafana/i18n';\nimport { EditorField } from '@grafana/plugin-ui';\nimport { Button, Select, Stack, useStyles2 } from '@grafana/ui';\n\nimport { QueryEditorExpressionType, QueryEditorFunctionExpression } from '../../expressions';\nimport { DB, QueryFormat, SQLExpression, SQLQuery } from '../../types';\nimport { createFunctionField } from '../../utils/sql.utils';\nimport { useSqlChange } from '../../utils/useSqlChange';\n\nimport { SelectFunctionParameters } from './SelectFunctionParameters';\n\ninterface SelectRowProps {\n  query: SQLQuery;\n  onQueryChange: (sql: SQLQuery) => void;\n  db: DB;\n  columns: Array<SelectableValue<string>>;\n}\n\nexport function SelectRow({ query, onQueryChange, db, columns }: SelectRowProps) {\n  const styles = useStyles2(getStyles);\n  const { onSqlChange } = useSqlChange({ query, onQueryChange, db });\n  const timeSeriesAliasOpts: Array<SelectableValue<string>> = [];\n\n  // Add necessary alias options for time series format\n  // when that format has been selected\n  if (query.format === QueryFormat.Timeseries) {\n    timeSeriesAliasOpts.push({ label: t('grafana-sql.components.select-row.label.time', 'time'), value: 'time' });\n    timeSeriesAliasOpts.push({ label: t('grafana-sql.components.select-row.label.value', 'value'), value: 'value' });\n  }\n\n  const onAggregationChange = useCallback(\n    (item: QueryEditorFunctionExpression, index: number) => (aggregation: SelectableValue<string>) => {\n      const newItem = {\n        ...item,\n        name: aggregation?.value,\n        parameters: [\n          { type: QueryEditorExpressionType.FunctionParameter as const, name: item.parameters?.[0]?.name || '' },\n        ],\n      };\n      const newSql: SQLExpression = {\n        ...query.sql,\n        columns: query.sql?.columns?.map((c, i) => (i === index ? newItem : c)),\n      };\n\n      onSqlChange(newSql);\n    },\n    [onSqlChange, query.sql]\n  );\n\n  const onAliasChange = useCallback(\n    (item: QueryEditorFunctionExpression, index: number) => (alias: SelectableValue<string>) => {\n      let newItem = { ...item };\n\n      if (alias !== null) {\n        newItem = { ...item, alias: `\"${alias?.value?.trim()}\"` };\n      } else {\n        delete newItem.alias;\n      }\n\n      const newSql: SQLExpression = {\n        ...query.sql,\n        columns: query.sql?.columns?.map((c, i) => (i === index ? newItem : c)),\n      };\n\n      onSqlChange(newSql);\n    },\n    [onSqlChange, query.sql]\n  );\n\n  const removeColumn = useCallback(\n    (index: number) => () => {\n      const clone = [...(query.sql?.columns || [])];\n      clone.splice(index, 1);\n      const newSql: SQLExpression = {\n        ...query.sql,\n        columns: clone,\n      };\n      onSqlChange(newSql);\n    },\n    [onSqlChange, query.sql]\n  );\n\n  const addColumn = useCallback(() => {\n    const newSql: SQLExpression = { ...query.sql, columns: [...(query.sql?.columns || []), createFunctionField()] };\n    onSqlChange(newSql);\n  }, [onSqlChange, query.sql]);\n\n  const aggregateOptions = () => {\n    const options: Array<SelectableValue<string>> = [\n      {\n        label: t('grafana-sql.components.select-row.aggregate-options.options.label.aggregations', 'Aggregations'),\n        options: [],\n      },\n      { label: t('grafana-sql.components.select-row.aggregate-options.options.label.macros', 'Macros'), options: [] },\n    ];\n    for (const func of db.functions()) {\n      // Create groups for macros\n      if (func.name.startsWith('$__')) {\n        options[1].options.push({ label: func.name, value: func.name });\n      } else {\n        options[0].options.push({ label: func.name, value: func.name });\n      }\n    }\n    return options;\n  };\n\n  return (\n    <Stack gap={2} wrap=\"wrap\" direction=\"column\">\n      {query.sql?.columns?.map((item, index) => (\n        <div key={index}>\n          <Stack gap={2} alignItems=\"end\">\n            <EditorField\n              label={t('grafana-sql.components.select-row.label-data-operations', 'Data operations')}\n              optional\n              width={25}\n            >\n              <Select\n                value={item.name ? toOption(item.name) : null}\n                inputId={`select-aggregation-${index}-${uniqueId()}`}\n                data-testid={selectors.components.SQLQueryEditor.selectAggregation}\n                isClearable\n                menuShouldPortal\n                allowCustomValue\n                options={aggregateOptions()}\n                onChange={onAggregationChange(item, index)}\n              />\n            </EditorField>\n\n            <SelectFunctionParameters\n              currentColumnIndex={index}\n              columns={columns}\n              onSqlChange={onSqlChange}\n              query={query}\n              db={db}\n            />\n\n            <EditorField label={t('grafana-sql.components.select-row.label-alias', 'Alias')} optional width={15}>\n              <Select\n                value={item.alias ? toOption(item.alias) : null}\n                inputId={`select-alias-${index}-${uniqueId()}`}\n                data-testid={selectors.components.SQLQueryEditor.selectAlias}\n                options={timeSeriesAliasOpts}\n                onChange={onAliasChange(item, index)}\n                isClearable\n                menuShouldPortal\n                allowCustomValue\n              />\n            </EditorField>\n            <Button\n              title={t('grafana-sql.components.select-row.title-remove-column', 'Remove column')}\n              type=\"button\"\n              icon=\"trash-alt\"\n              variant=\"secondary\"\n              size=\"md\"\n              onClick={removeColumn(index)}\n            />\n          </Stack>\n        </div>\n      ))}\n      <Button\n        type=\"button\"\n        onClick={addColumn}\n        variant=\"secondary\"\n        title={t('grafana-sql.components.select-row.title-add-column', 'Add column')}\n        size=\"md\"\n        icon=\"plus\"\n        className={styles.addButton}\n      />\n    </Stack>\n  );\n}\n\nconst getStyles = () => {\n  return {\n    addButton: css({ alignSelf: 'flex-start' }),\n    label: css({\n      padding: 0,\n      margin: 0,\n      width: 'unset',\n    }),\n  };\n};\n","import { useAsync } from 'react-use';\n\nimport { t } from '@grafana/i18n';\nimport { EditorRows, EditorRow, EditorField } from '@grafana/plugin-ui';\n\nimport { DB, QueryEditorProps, QueryRowFilter } from '../../types';\nimport { QueryToolbox } from '../query-editor-raw/QueryToolbox';\n\nimport { Preview } from './Preview';\nimport { SQLGroupByRow } from './SQLGroupByRow';\nimport { SQLOrderByRow } from './SQLOrderByRow';\nimport { SQLWhereRow } from './SQLWhereRow';\nimport { SelectRow } from './SelectRow';\n\ninterface VisualEditorProps extends QueryEditorProps {\n  db: DB;\n  queryRowFilter: QueryRowFilter;\n  onValidate: (isValid: boolean) => void;\n}\n\nexport const VisualEditor = ({ query, db, queryRowFilter, onChange, onValidate, range }: VisualEditorProps) => {\n  const state = useAsync(async () => {\n    const fields = await db.fields(query);\n    return fields;\n  }, [db, query.dataset, query.table]);\n\n  return (\n    <>\n      <EditorRows>\n        <EditorRow>\n          <SelectRow columns={state.value || []} query={query} onQueryChange={onChange} db={db} />\n        </EditorRow>\n        {queryRowFilter.filter && (\n          <EditorRow>\n            <EditorField\n              label={t('grafana-sql.components.visual-editor.label-filter-by-column-value', 'Filter by column value')}\n              optional\n            >\n              <SQLWhereRow fields={state.value || []} query={query} onQueryChange={onChange} db={db} />\n            </EditorField>\n          </EditorRow>\n        )}\n        {queryRowFilter.group && (\n          <EditorRow>\n            <EditorField label={t('grafana-sql.components.visual-editor.label-group-by-column', 'Group by column')}>\n              <SQLGroupByRow fields={state.value || []} query={query} onQueryChange={onChange} db={db} />\n            </EditorField>\n          </EditorRow>\n        )}\n        {queryRowFilter.order && (\n          <EditorRow>\n            <SQLOrderByRow fields={state.value || []} query={query} onQueryChange={onChange} db={db} />\n          </EditorRow>\n        )}\n        {queryRowFilter.preview && query.rawSql && (\n          <EditorRow>\n            <Preview rawSql={query.rawSql} datasourceType={query.datasource?.type} />\n          </EditorRow>\n        )}\n      </EditorRows>\n      <QueryToolbox db={db} query={query} onValidate={onValidate} range={range} />\n    </>\n  );\n};\n","import { useCallback, useEffect, useState } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { QueryEditorProps } from '@grafana/data';\nimport { EditorMode } from '@grafana/plugin-ui';\nimport { Space } from '@grafana/ui';\n\nimport { SqlDatasource } from '../datasource/SqlDatasource';\nimport { applyQueryDefaults } from '../defaults';\nimport { SQLQuery, QueryRowFilter, SQLOptions } from '../types';\nimport { haveColumns } from '../utils/sql.utils';\n\nimport { QueryHeader, QueryHeaderProps } from './QueryHeader';\nimport { RawEditor } from './query-editor-raw/RawEditor';\nimport { VisualEditor } from './visual-query-builder/VisualEditor';\n\nexport interface SqlQueryEditorProps extends QueryEditorProps<SqlDatasource, SQLQuery, SQLOptions> {\n  queryHeaderProps?: Pick<QueryHeaderProps, 'dialect'>;\n}\n\nexport default function SqlQueryEditor({\n  datasource,\n  query,\n  onChange,\n  onRunQuery,\n  range,\n  queryHeaderProps,\n}: SqlQueryEditorProps) {\n  const [isQueryRunnable, setIsQueryRunnable] = useState(true);\n  const db = datasource.getDB();\n\n  const { preconfiguredDatabase } = datasource;\n  const dialect = queryHeaderProps?.dialect ?? 'other';\n  const { loading, error } = useAsync(async () => {\n    return () => {\n      if (datasource.getDB(datasource.id).init !== undefined) {\n        datasource.getDB(datasource.id).init!();\n      }\n    };\n  }, [datasource]);\n\n  const queryWithDefaults = applyQueryDefaults(query);\n  const [queryRowFilter, setQueryRowFilter] = useState<QueryRowFilter>({\n    filter: !!queryWithDefaults.sql?.whereString,\n    group: !!queryWithDefaults.sql?.groupBy?.[0]?.property.name,\n    order: !!queryWithDefaults.sql?.orderBy?.property.name,\n    preview: true,\n  });\n  const [queryToValidate, setQueryToValidate] = useState(queryWithDefaults);\n\n  useEffect(() => {\n    return () => {\n      if (datasource.getDB(datasource.id).dispose !== undefined) {\n        datasource.getDB(datasource.id).dispose!();\n      }\n    };\n  }, [datasource]);\n\n  const processQuery = useCallback(\n    (q: SQLQuery) => {\n      if (isQueryValid(q) && onRunQuery) {\n        onRunQuery();\n      }\n    },\n    [onRunQuery]\n  );\n\n  const onQueryChange = (q: SQLQuery, process = true) => {\n    setQueryToValidate(q);\n    onChange(q);\n\n    if (haveColumns(q.sql?.columns) && q.sql?.columns.some((c) => c.name) && !queryRowFilter.group) {\n      setQueryRowFilter({ ...queryRowFilter, group: true });\n    }\n\n    if (process) {\n      processQuery(q);\n    }\n  };\n\n  const onQueryHeaderChange = (q: SQLQuery) => {\n    setQueryToValidate(q);\n    onChange(q);\n  };\n\n  if (loading || error) {\n    return null;\n  }\n\n  return (\n    <>\n      <QueryHeader\n        db={db}\n        preconfiguredDataset={preconfiguredDatabase}\n        onChange={onQueryHeaderChange}\n        onRunQuery={onRunQuery}\n        onQueryRowChange={setQueryRowFilter}\n        queryRowFilter={queryRowFilter}\n        query={queryWithDefaults}\n        isQueryRunnable={isQueryRunnable}\n        dialect={dialect}\n      />\n\n      <Space v={0.5} />\n\n      {queryWithDefaults.editorMode !== EditorMode.Code && (\n        <VisualEditor\n          db={db}\n          query={queryWithDefaults}\n          onChange={(q: SQLQuery) => onQueryChange(q, false)}\n          queryRowFilter={queryRowFilter}\n          onValidate={setIsQueryRunnable}\n          range={range}\n        />\n      )}\n\n      {queryWithDefaults.editorMode === EditorMode.Code && (\n        <RawEditor\n          db={db}\n          query={queryWithDefaults}\n          queryToValidate={queryToValidate}\n          onChange={onQueryChange}\n          onRunQuery={onRunQuery}\n          onValidate={setIsQueryRunnable}\n          range={range}\n        />\n      )}\n    </>\n  );\n}\n\nconst isQueryValid = (q: SQLQuery) => {\n  return Boolean(q.rawSql);\n};\n"],"names":["resolveSelectors","versionedSelectors","grafanaVersion","resolveSelectorGroup","replace","group","result","key","value","Object","entries","isVersionedSelectorGroup","assertIsSemverValid","resolveSelector","target","first","keys","valid","versionedSelector","versionToUse","versions","sort","compare","length","version","gte","selectorName","every","Error","MIN_GRAFANA_VERSION","versionedComponents","RadioButton","container","Breadcrumbs","breadcrumb","title","CanvasGridAddActions","addPanel","groupPanels","ungroup","addRow","pasteRow","addTab","pasteTab","DashboardEditPaneSplitter","primaryBody","EditPaneHeader","deleteButton","copyDropdown","copy","duplicate","backButton","TimePicker","openButton","overlayContent","fromField","toField","applyTimeRange","copyTimeRange","pasteTimeRange","calendar","label","closeButton","absoluteTimeRangeTitle","DataSourcePermissions","form","roleType","rolePicker","permissionLevel","DateTimePicker","input","DataSource","TestData","QueryTab","scenarioSelectContainer","scenarioSelect","max","min","noise","seriesCount","spread","startValue","drop","DataSourceHttpSettings","urlInput","Jaeger","traceIDInput","Prometheus","configPage","connectionSettings","manageAlerts","allowAsRecordingRulesTarget","scrapeInterval","queryTimeout","defaultEditor","disableMetricLookup","prometheusType","prometheusVersion","cacheLevel","incrementalQuerying","queryOverlapWindow","disableRecordingRules","customQueryParameters","httpMethod","exemplarsAddButton","internalLinkSwitch","codeModeMetricNamesSuggestionLimit","seriesLimit","queryEditor","explain","editorToggle","options","legend","format","step","type","exemplars","builder","metricSelect","hints","metricsExplorer","queryAdvisor","code","queryField","metricsCountInfo","metricsBrowser","selectMetric","metricList","labelNamesFilter","labelValuesFilter","useQuery","useAsRateQuery","validateSelector","clear","exemplarMarker","variableQueryEditor","queryType","labelnames","metricRegex","labelValues","labelSelect","metricNames","varQueryResult","seriesQuery","classicQuery","annotations","minStep","tags","text","seriesValueAsTimestamp","Menu","MenuComponent","MenuGroup","MenuItem","SubMenu","icon","Panels","Panel","content","headerContainer","headerItems","item","menuItems","menu","containerByTitle","headerCornerInfo","mode","status","_","loadingBar","HoverWidget","dragIcon","PanelDataErrorMessage","Visualization","Graph","VisualizationTab","legendSection","Legend","legendItemAlias","name","showLegendSwitch","xAxis","labels","BarGauge","valueV2","PieChart","svgSlice","Text","Table","header","footer","body","VizLegend","seriesName","Drawer","General","expand","contract","close","rcContentWrapper","subtitle","DashboardSaveDrawer","saveButton","saveAsButton","saveAsTitleInput","PanelEditor","OptionsPane","select","fieldLabel","fieldInput","DataPane","applyButton","toggleVizPicker","toggleVizOptions","toggleTableView","showZoomField","showAttributionField","showScaleField","showMeasureField","showDebugField","measureButton","Outline","section","node","ElementEditPane","variableType","addVariableButton","variableNameInput","variableLabelInput","AutoGridLayout","minColumnWidth","customMinColumnWidth","clearCustomMinColumnWidth","maxColumns","rowHeight","customRowHeight","clearCustomRowHeight","fillScreen","PanelInspector","Data","Stats","Json","Query","refreshButton","jsonObjectKeys","Tab","active","RefreshPicker","runButtonV2","intervalButtonV2","queryInspectorButton","queryHistoryButton","addQuery","addQueryFromLibrary","queryGroupTopSection","addExpression","QueryHistory","queryText","QueryEditorRows","rows","QueryEditorRow","actionButton","refId","AlertTab","AlertRules","groupToggle","toggle","expandedContent","previewButton","ruleNameField","newFolderButton","newFolderNameField","newFolderNameCreateButton","newEvaluationGroupButton","newEvaluationGroupName","newEvaluationGroupInterval","newEvaluationGroupCreate","stepNo","stepAdvancedModeSwitch","Alert","alertV2","severity","TransformTab","newTransform","transformationEditor","transformationEditorDebugger","Transforms","card","disableTransformationButton","Reduce","modeLabel","calculationsLabel","SpatialOperations","actionLabel","locationLabel","location","autoOption","coords","option","latitudeFieldLabel","longitudeFieldLabel","geohash","geohashFieldLabel","lookup","lookupFieldLabel","gazetteerFieldLabel","searchInput","noTransformationsMessage","addTransformationButton","removeAllTransformationsButton","NavBar","Configuration","button","Toggle","Reporting","NavMenu","NavToolbar","commandPaletteTrigger","shareDashboard","markAsFavorite","editDashboard","editButton","exitButton","settingsButton","addRowButton","addLibraryPanelButton","addVisualizationButton","pastePanelButton","discardChangesButton","discardLibraryPanelButton","unlinkLibraryPanelButton","saveLibraryPanelButton","backToDashboardButton","PageToolbar","tooltip","itemButton","QueryEditorToolbarItem","BackButton","backArrow","OptionsGroup","PluginVisualization","current","Select","toggleAllOptions","singleValue","FieldConfigEditor","OverridesConfigEditor","FolderPicker","containerV2","ReadonlyFolderPicker","DataSourcePicker","inputV2","dataSourceList","advancedModal","builtInDataSourceList","TimeZonePicker","changeTimeSettingsButton","WeekStartPicker","placeholder","TraceViewer","spanBar","QueryField","QueryBuilder","queryPatterns","inputSelect","valueSelect","matchOperatorSelect","ValuePicker","Search","sectionV2","itemsV2","cards","collapseFolder","sectionId","expandFolder","dashboardItem","dashboardCard","folderHeader","folderName","folderContent","dashboardItems","DashboardLinks","dropDown","link","LoadingIndicator","CallToActionCard","buttonV2","DataLinksContextMenu","singleLink","DataLinksActionsTooltip","tooltipWrapper","CodeEditor","ReactMonacoEditor","editorLazy","DashboardImportPage","textarea","submit","ImportDashboardForm","PanelAlertTabContent","VisualizationPreview","ColorSwatch","DashboardRow","UserProfile","profileSaveButton","preferencesSaveButton","orgsTable","sessionsTable","extensionPointTabs","extensionPointTab","tabId","FileUpload","inputField","fileNameSpan","DebugOverlay","wrapper","OrgRolePicker","AnalyticsToolbarButton","Variables","variableOption","variableLinkWrapper","Annotations","annotationsTypeInput","annotationsChoosePanelInput","editor","testButton","resultContainer","Tooltip","ReturnToPrevious","buttonGroup","dismissButton","SQLQueryEditor","selectColumn","selectColumnInput","selectFunctionParameter","selectAggregation","selectAggregationInput","selectAlias","selectAliasInput","selectInputParameter","filterConjunction","filterField","filterOperator","headerTableSelector","headerFilterSwitch","headerGroupSwitch","headerOrderSwitch","headerPreviewSwitch","EntityNotFound","Portal","selectors","pages","Alerting","AddAlertRule","url","EditAlertRule","alertRuleUid","Login","username","password","skip","PasswordlessLogin","email","Home","delete","readOnly","saveAndTest","alert","DataSources","dataSources","dataSourceName","EditDataSource","dataSourceUid","settings","AddDataSource","dataSourcePluginsV2","pluginName","ConfirmModal","AddDashboard","addNewPanel","itemButtonAddViz","addNewRow","addNewPanelLibrary","Settings","List","Edit","annotationIndex","editIndex","ImportDashboard","Dashboard","uid","DashNav","nav","navV2","publicDashboardTag","shareButton","scrollContainer","newShareButton","shareLink","arrowMenu","shareInternally","shareExternally","shareSnapshot","NewExportButton","exportAsJson","playlistControls","prev","stop","next","Controls","submenu","submenuItem","submenuItemLabels","submenuItemValueDropDownValueLinkTexts","submenuItemValueDropDownDropDown","submenuItemValueDropDownOptionTexts","annotationsWrapper","annotationLabel","annotationToggle","Actions","deleteDashBoard","sectionItems","saveDashBoard","saveAsDashBoard","urlParams","dashboardUid","addAnnotationCTAV2","NewAnnotation","panelFilterSelect","showInLabel","previewInDashboard","apply","enable","hide","addVariableCTAV2","newButton","table","tableRowNameFields","variableName","tableRowDefinitionFields","tableRowArrowUpButtons","tableRowArrowDownButtons","tableRowDuplicateButtons","tableRowRemoveButtons","headerLink","modeLabelNew","modeLabelEdit","generalNameInput","generalNameInputV2","generalTypeSelect","generalTypeSelectV2","generalLabelInput","generalLabelInputV2","generalHideSelect","generalHideSelectV2","selectionOptionsAllowCustomValueSwitch","selectionOptionsMultiSwitch","selectionOptionsIncludeAllSwitch","selectionOptionsCustomAllInput","previewOfValuesOption","submitButton","QueryVariable","queryOptionsDataSourceSelect","queryOptionsOpenButton","queryOptionsRefreshSelect","queryOptionsRefreshSelectV2","queryOptionsRegExInput","queryOptionsRegExInputV2","queryOptionsSortSelect","queryOptionsSortSelectV2","queryOptionsQueryInput","valueGroupsTagsEnabledSwitch","valueGroupsTagsTagsQueryInput","valueGroupsTagsTagsValuesQueryInput","ConstantVariable","constantOptionsQueryInput","constantOptionsQueryInputV2","DatasourceVariable","datasourceSelect","nameFilter","TextBoxVariable","textBoxOptionsQueryInput","textBoxOptionsQueryInputV2","CustomVariable","customValueInput","IntervalVariable","intervalsValueInput","autoEnabledCheckbox","stepCountIntervalSelect","minIntervalInput","GroupByVariable","dataSourceSelect","infoText","modeToggle","AdHocFiltersVariable","marker","Rows","Repeated","ConfigSection","warningMessage","Dashboards","dashboards","toggleView","SaveDashboardAsModal","newName","save","SaveDashboardModal","saveVariables","saveTimerange","saveRefresh","SharePanelModal","linkToRenderedImage","ShareDashboardModal","PublicDashboard","WillBePublicCheckbox","LimitedDSCheckbox","CostIncreaseCheckbox","PauseSwitch","EnableAnnotationsSwitch","CreateButton","DeleteButton","CopyUrlInput","CopyUrlButton","SettingsDropdown","TemplateVariablesWarningAlert","UnsupportedDataSourcesWarningAlert","NoUpsertPermissionsWarningAlert","EnableTimeRangeSwitch","EmailSharingConfiguration","Container","ShareType","EmailSharingInput","EmailSharingInviteButton","EmailSharingList","DeleteEmail","ReshareLink","SnapshotScene","PublishSnapshot","ShareDashboardDrawer","ShareInternally","lockTimeRangeSwitch","shortenUrlSwitch","copyUrlButton","SharePanel","preview","widthInput","heightInput","scaleFactorInput","generateImageButton","downloadImageButton","ShareExternally","publicAlert","emailSharingAlert","shareTypeSelect","Creation","PublicShare","createButton","cancelButton","EmailShare","willBePublicCheckbox","enableTimeRangeSwitch","enableAnnotationsSwitch","revokeAccessButton","toggleAccessButton","ShareSnapshot","publishSnapshot","ExportDashboardDrawer","ExportAsJson","codeEditor","exportExternallyToggle","saveToFileButton","copyToClipboardButton","page","NotAvailable","pausedDescription","PublicDashboardScene","loadingPage","controls","RequestViewAccess","recipientInput","PublicDashboardConfirmAccess","Explore","graph","scrollView","addFromQueryLibrary","SoloPanel","PluginsList","list","listItem","signatureErrorNotice","PluginPage","signatureInfo","disabledInfo","PlaylistForm","interval","itemDelete","BrowseDashboards","row","checkbox","NewFolderForm","nameInput","SearchDashboards","FolderView","PublicDashboards","ListItem","linkButton","configButton","trashcanButton","pauseSwitch","UserListPage","tabs","allUsers","orgUsers","anonUserDevices","publicDashboardsUsers","users","org","admin","publicDashboards","UserListAdminPage","UsersListPage","UserAnonListPage","UsersListPublicDashboardsPage","DashboardsListModal","ProfilePage","Plugin","pluginId","MigrateToCloud","components","isOpen","onCancel","onDiscard","onCopy","buttonRef","useRef","styles","useStyles2","getStyles","useEffect","focus","Modal","div","className","modalHeaderTitle","Icon","size","span","titleText","Trans","i18nKey","onDismiss","p","ButtonRow","Button","variant","onClick","fill","ref","theme","css","paddingLeft","spacing","fontSize","typography","lg","float","paddingTop","margin","DatasetSelector","dataset","db","dialect","onChange","inputId","preconfiguredDataset","hasPreconfigCondition","state","useAsync","isSqlDatasourceDatabaseSelectionFeatureFlagEnabled","toOption","datasets","map","undefined","find","v","aria-label","t","disabled","loading","isLoading","menuShouldPortal","TableSelector","tables","data-testid","allowCustomValue","QueryHeader","isQueryRunnable","onQueryRowChange","onRunQuery","query","queryRowFilter","editorMode","copyToClipboard","useCopyToClipboard","showConfirm","setShowConfirm","useState","toRawSql","htmlId","useId","editorModes","EditorMode","Builder","Code","onEditorModeChange","useCallback","newEditorMode","reportInteraction","datasource","selectedEditorMode","EditorHeader","InlineSelect","e","QueryFormat","selectedFormat","QUERY_FORMAT_OPTIONS","InlineSwitch","id","transparent","showLabel","filter","ev","HTMLInputElement","displayed","checked","order","FlexItem","grow","br","placement","RadioButtonGroup","rawSql","Space","EditorRow","EditorField","width","sql","QueryEditorRaw","children","height","editorLanguageDefinition","queryRef","onRawQueryChange","processQuery","newQuery","rawQuery","SQLEditor","language","QueryValidator","onValidate","range","validationResult","setValidationResult","useTheme2","valueFormatter","useMemo","getValueFormat","error","color","colors","bodySmall","fontFamily","fontFamilyMonospace","success","info","secondary","validateQuery","useAsyncFn","q","trim","useDebounce","isError","isValid","splat","split","slice","join","processErrorMessage","Spinner","inline","statistics","values","bytes","formattedValueToString","TotalBytesProcessed","strong","QueryToolbox","showTools","onFormatCode","onExpand","isExpanded","validatorProps","border","medium","borderTop","padding","display","flexGrow","justifyContent","hint","whiteSpace","cursor","style","visibility","Stack","gap","IconButton","expanded","RawEditor","queryToValidate","setIsExpanded","toolboxRef","toolboxMeasure","useMeasure","editorRef","editorMeasure","getEditorLanguageDefinition","renderQueryEditor","formatQuery","renderEditor","standalone","AutoSizer","background","primary","alignItems","queryNum","closeOnBackdropClick","closeOnEscape","modal","contentClassName","modalContent","Preview","datasourceType","labelElement","labelWrapper","copyPreview","Field","formatSQL","monacoOptions","scrollbar","vertical","scrollBeyondLastLine","showMiniMap","fontWeight","fontWeightMedium","paddingBottom","getColumnsWithIndices","fields","columns","c","i","parameters","useSqlChange","onQueryChange","onSqlChange","GroupByRow","onGroupByChange","cleaned","setGroupByField","property","newSql","groupBy","EditorList","items","renderItem","makeRenderColumn","onChangeItem","onDeleteItem","InputGroup","AccessoryButton","SQLGroupByRow","columnsWithIndices","sortOrderOptions","description","OrderByRow","showOffset","onSortOrderChange","orderByDirection","onLimitChange","event","limit","Number","parseInt","currentTarget","onOffsetChange","offset","onOrderByChange","orderBy","setPropertyField","isClearable","h","optional","Input","uniqueId","SQLOrderByRow","buttonLabels","emptyInitTree","Utils","uuid","TIME_FILTER","macros","widgets","BasicConfig","factory","props","setValue","number","datetime","operator","val","dateValue","dateTime","utc","valueFormat","date","sqlFormatValue","field","widget","operatorDefinition","rightFieldDef","includes","func","call","ctx","canRegroup","maxNesting","canReorder","showNot","addRuleLabel","deleteLabel","renderConjs","conjProps","conjunctionOptions","selectedConjunction","setConjunction","renderField","fieldProps","config","f","mainWidgetProps","customProps","selectedKey","setField","renderButton","buttonProps","buttonLabel","renderOperator","operatorProps","op","customOperators","supportedOperators","operators","sqlFormatInOp","sqlFormatOp","bind","noop","formatInOp","formatOp","sqlFormatNotInOp","formatNotInOp","valueSrc","splitIfString","valueType","opDef","operatorOptions","fieldDef","_operator","getCustomOperators","textWidget","types","opers","customTextWidget","customTypes","raqbConfig","isString","WhereRow","tree","setTree","configWithDefaults","initTree","checkTree","loadTree","whereJsonTree","onTreeChange","changedTree","getTree","whereString","sqlFormat","renderBuilder","flex","direction","SQLWhereRow","col","raqbFieldType","valueSources","mapFieldsToTypes","templateVars","multiVariableInWhereString","tv","multi","some","replaceAll","removeQuotesForMultiVariables","getTemplateSrv","getVariables","JSON","stringify","injectGlobal","SelectColumn","onParameterChange","selectInputId","s","SelectCustomFunctionParameters","currentColumnIndex","macroOrFunction","addParameter","index","QueryEditorExpressionType","FunctionParameter","removeParameter","columnIndex","InlineLabel","getColumnValue","param","addonAfter","SelectFunctionParameters","functions","fieldsFromFunction","setFieldsFromFunction","getFieldsFromFunction","push","keepIndex","funcParam","required","SelectRow","timeSeriesAliasOpts","Timeseries","onAggregationChange","aggregation","newItem","onAliasChange","alias","removeColumn","clone","splice","addColumn","createFunctionField","aggregateOptions","startsWith","wrap","addButton","alignSelf","VisualEditor","EditorRows","SqlQueryEditor","queryHeaderProps","queryWithDefaults","setIsQueryRunnable","getDB","preconfiguredDatabase","init","applyQueryDefaults","setQueryRowFilter","setQueryToValidate","dispose","isQueryValid","process","haveColumns","Boolean"],"sourceRoot":""}